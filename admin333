local HttpService = game:GetService("HttpService")
local UIState

local folderName = "SaturnV7"
CurrentConfigName = CurrentConfigName or "default"

local ConfigDropdownRef

local function sanitize(s)
    s = tostring(s or ""):gsub("[%c%p%s]+","_")
    return (#s > 0) and s or "default"
end
local function cfgPath(name) return folderName .. "/" .. sanitize(name) .. ".json" end

local function listConfigs()
    local out = {}
    if isfolder and listfiles and isfolder(folderName) then
        for _, f in pairs(listfiles(folderName)) do
            if f:sub(-5) == ".json" then
                local n = f:match("([^/\\]+)%.json$")
                if n then table.insert(out, n) end
            end
        end
    end
    table.sort(out, function(a,b) return a:lower() < b:lower() end)
    if #out == 0 then out = { "No saved configs" } end
    return out
end

function RefreshConfigs(selectName)
    local opts = listConfigs()
    if ConfigDropdownRef and ConfigDropdownRef.SetOptions then
        local idx = 1
        if selectName then
            for i, v in pairs(opts) do if v == selectName then idx = i break end end
        end
        ConfigDropdownRef:SetOptions(opts, idx)
    end
end

function SaveConfig()
    if not writefile then return warn("executor has no file I/O") end
    if not isfolder or not makefolder then return warn("no folder api") end
    if not isfolder(folderName) then pcall(makefolder, folderName) end

    local data = {
        version = 1,
        theme   = UIState and UIState.currentTheme or nil,
        toggles = UIState and UIState.toggles or {},
        sliders = UIState and UIState.sliders or {},
        dropdowns = {},
        colorPickers = {},
        keybinds = UIState and UIState.keybinds or {}
    }

    if UIState and UIState.dropdowns then
        for name, dd in pairs(UIState.dropdowns) do
            data.dropdowns[name] = dd.selectedIndex
        end
    end
    if UIState and UIState.colorPickers then
        for name, c3 in pairs(UIState.colorPickers) do
            data.colorPickers[name] = { R = c3.R, G = c3.G, B = c3.B }
        end
    end

    local ok, json = pcall(HttpService.JSONEncode, HttpService, data)
    if not ok then return warn("❌ Failed to encode config") end
    local ok2, err = pcall(writefile, cfgPath(CurrentConfigName), json)
    if ok2 then
        print("✅ Saved config:", CurrentConfigName)
    else
        warn("❌ Failed to write config:", err)
    end
end

local function LoadConfig()
    local filePath = folderName .. "/" .. CurrentConfigName .. ".json"
    if not isfile(filePath) then
        warn("[Config Manager] Config does not exist:", CurrentConfigName)
        return
    end

    local ok, raw = pcall(readfile, filePath)
    if not ok then
        warn("[Config Manager] Failed to read config:", CurrentConfigName)
        return
    end

    local success, loadedConfig = pcall(function()
        return HttpService:JSONDecode(raw)
    end)
    if not success or typeof(loadedConfig) ~= "table" then
        warn("[Config Manager] Failed to decode config:", CurrentConfigName)
        return
    end

    for name, val in pairs(loadedConfig.toggles or {}) do
        pcall(function()
            if UIRegistry.toggles[name] and UIRegistry.toggles[name].Set then
                UIRegistry.toggles[name].Set(val)
            else
                UIState.toggles[name] = val
            end
        end)
    end

    for name, val in pairs(loadedConfig.sliders or {}) do
        pcall(function()
            if UIRegistry.sliders[name] and UIRegistry.sliders[name].Set then
                UIRegistry.sliders[name].Set(val)
            else
                UIState.sliders[name] = val
            end
        end)
    end

    for name, idx in pairs(loadedConfig.dropdowns or {}) do
        pcall(function()
            if UIRegistry.dropdowns[name] and UIRegistry.dropdowns[name].SetIndex then
                UIRegistry.dropdowns[name].SetIndex(idx)
            else
                UIState.dropdowns[name] = { selectedIndex = idx }
            end
        end)
    end

    for name, rgb in pairs(loadedConfig.colorPickers or {}) do
        pcall(function()
            local c3 = Color3.new(rgb.R, rgb.G, rgb.B)
            if UIRegistry.colorPickers[name] and UIRegistry.colorPickers[name].SetColor then
                UIRegistry.colorPickers[name].SetColor(c3)
            else
                UIState.colorPickers[name] = c3
            end
        end)
    end

    for name, kc in pairs(loadedConfig.keybinds or {}) do
        pcall(function()
            if UIRegistry.toggles[name] and UIRegistry.toggles[name].SetBind then
                UIRegistry.toggles[name].SetBind(kc)
            else
                UIState.keybinds[name] = kc
            end
        end)
    end

    print("[Config Manager] ✅ Loaded config:", CurrentConfigName)
end

function DeleteConfig()
    local name = sanitize(CurrentConfigName)
    if name == "No_saved_configs" then return warn("⚠ Pick a real config") end
    local path = cfgPath(name)
    if not delfile or not isfile or not isfile(path) then return warn("⚠ Config not found:", name) end
    local ok, err = pcall(delfile, path)
    if ok then
        print("🗑️ Deleted config:", name)
    else
        warn("❌ Failed to delete:", name, err)
    end
end

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local writefile = writefile
local readfile = readfile
local isfile = isfile
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

local function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        if typeof(k) == "string" then
            instance[k] = v
        end
    end
    return instance
end


UIState = {
    toggles = {}, sliders = {}, dropdowns = {}, colorPickers = {},
    keybinds = {}, textboxes = {},
    currentTab = "Catching", isVisible = true, currentTheme = "Red"
}

getgenv().UIRegistry = getgenv().UIRegistry or {
    toggles = {},
    sliders = {},
    dropdowns = {},
    colorPickers = {}
}

local ConfigSystem = {
	fileName = "SaturnUI_Config.json",
	
	save = function(self)
		local configData = {
			toggles = UIState.toggles,
			sliders = UIState.sliders,
			dropdowns = {},
			colorPickers = {}
		}
		
		for name, dropdown in pairs(UIState.dropdowns) do
			configData.dropdowns[name] = dropdown.selectedIndex
		end
		
		for name, color in pairs(UIState.colorPickers) do
			configData.colorPickers[name] = {
				R = color.R,
				G = color.G,
				B = color.B
			}
		end
		
		local success, result = pcall(function()
			local jsonString = HttpService:JSONEncode(configData)
			writefile(self.fileName, jsonString)
		end)
		
		if success then
			game.StarterGui:SetCore("SendNotification", {
				Title = "Saturn UI",
				Text = "Configuration saved successfully!",
				Duration = 3
			})
		end
	end,
	
	load = function(self)
		if not isfile(self.fileName) then
			return false
		end
		
		local success, result = pcall(function()
			local jsonString = readfile(self.fileName)
			return HttpService:JSONDecode(jsonString)
		end)
		
		if success and result then
			if result.toggles then
				for name, value in pairs(result.toggles) do
					UIState.toggles[name] = value
				end
			end
			
			if result.sliders then
				for name, value in pairs(result.sliders) do
					UIState.sliders[name] = value
				end
			end
			
			if result.dropdowns then
				for name, index in pairs(result.dropdowns) do
					if UIState.dropdowns[name] then
						UIState.dropdowns[name].selectedIndex = index
					end
				end
			end
			
			if result.colorPickers then
				for name, colorData in pairs(result.colorPickers) do
					UIState.colorPickers[name] = Color3.new(colorData.R, colorData.G, colorData.B)
				end
			end
			
			game.StarterGui:SetCore("SendNotification", {
				Title = "Saturn UI",
				Text = "Configuration loaded successfully!",
				Duration = 3
			})
			
			return true
		end
		
		return false
	end
}

local catching = {
	Magnets = false,
	MagnetHitbox = false,
	PullVector = true,
	VisualizePrediction = false,
	IncreasedHandsize = false,
	IncreasedBallSize = false
}

local Themes = {
	Red = {
		Background = Color3.fromRGB(11, 12, 14),
		Secondary = Color3.fromRGB(20, 22, 26),
		Accent = Color3.fromRGB(248, 91, 91),
		Text = Color3.fromRGB(255, 255, 255),
		TextSecondary = Color3.fromRGB(156, 156, 156),
		Stroke = Color3.fromRGB(21, 23, 26)
	},
	Light = {
		Background = Color3.fromRGB(255, 255, 255),
		Secondary = Color3.fromRGB(245, 245, 245),
		Accent = Color3.fromRGB(102, 91, 248),
		Text = Color3.fromRGB(0, 0, 0),
		TextSecondary = Color3.fromRGB(100, 100, 100),
		Stroke = Color3.fromRGB(200, 200, 200)
	},
	Blue = {
		Background = Color3.fromRGB(15, 23, 42),
		Secondary = Color3.fromRGB(30, 41, 59),
		Accent = Color3.fromRGB(59, 130, 246),
		Text = Color3.fromRGB(248, 250, 252),
		TextSecondary = Color3.fromRGB(148, 163, 184),
		Stroke = Color3.fromRGB(51, 65, 85)
	},
}

local function getCurrentTheme()
	return Themes[UIState.currentTheme]
end

local Fonts = {
	Regular = Font.new("rbxassetid://12187364147", Enum.FontWeight.Regular),
	Medium = Font.new("rbxassetid://12187364147", Enum.FontWeight.Medium),
	SemiBold = Font.new("rbxassetid://12187364147", Enum.FontWeight.SemiBold)
}

local UserInputService = game:GetService("UserInputService")
local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
local sizeScale = isMobile and 0.67 or 1

local Background = createInstance("Frame", {
    Name = "Background",
    Position = UDim2.new(0.3, 0, 0.25, 0),
    Size = UDim2.new(0, 650 * sizeScale, 0, 420 * sizeScale),
    Parent = ScreenGui,
    BackgroundTransparency = 0.3,
    BackgroundColor3 = Color3.fromRGB(11, 12, 14),
    BorderSizePixel = 0,
    ZIndex = 2
})

local MainCorner = createInstance("UICorner", {
	Parent = Background,
	CornerRadius = UDim.new(0, 6)
})

local MainStroke = createInstance("UIStroke", {
	Parent = Background,
	Color = Color3.fromRGB(20, 22, 26),
	Thickness = 2,
	LineJoinMode = Enum.LineJoinMode.Round,
	Transparency = 0
})


local Header = createInstance("Frame", {
	Name = "Header",
	Size = UDim2.new(1, 0, 0, 50),
	Parent = Background,
	BackgroundTransparency = 1,
	ZIndex = 3
})

local LeftRow = createInstance("Frame", {
	Name = "LeftRow",
	Parent = Header,
	BackgroundTransparency = 1,
	Size = UDim2.new(1, -46, 1, 0),
	ZIndex = 3
})
createInstance("UIPadding", {
	Parent = LeftRow,
	PaddingLeft = UDim.new(0, 10)
})
local LeftRowLayout = createInstance("UIListLayout", {
	Parent = LeftRow,
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Padding = UDim.new(0, 15),
	SortOrder = Enum.SortOrder.LayoutOrder
})

local ScriptInfo = createInstance("Frame", {
	Name = "ScriptInfo",
	Size = UDim2.new(0, 150, 0, 40),
	Parent = LeftRow,
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderSizePixel = 0,
	ZIndex = 4
})
createInstance("UICorner", { Parent = ScriptInfo, CornerRadius = UDim.new(0, 6) })

local ScriptStroke = createInstance("UIStroke", {
	Parent = ScriptInfo,
	Color = Color3.fromRGB(255, 255, 255),
	Thickness = 1,
	LineJoinMode = Enum.LineJoinMode.Round
})
createInstance("UIGradient", {
	Parent = ScriptStroke,
	Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(73, 31, 31)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(131, 54, 54)),
	}),
	Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 0),
	})
})

local ScriptGradient = createInstance("UIGradient", {
	Parent = ScriptInfo,
	Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(23, 29, 35)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(198, 73, 73)),
	}),
	Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 0),
	})
})

local ScriptIcon = createInstance("ImageLabel", {
	Name = "ScriptIcon",
	Position = UDim2.new(0, 8, 0.5, 0),
	Size = UDim2.new(0, 30, 0, 30),
	Parent = ScriptInfo,
	BackgroundTransparency = 1,
	AnchorPoint = Vector2.new(0, 0.5),
	ImageColor3 = Color3.new(1,1,1),
	Image = "rbxassetid://124581386070639",
	ZIndex = 5
})

local Title = createInstance("TextLabel", {
	Name = "Title",
	Position = UDim2.new(0, 40, 0, 0),
	Size = UDim2.new(1, -45, 0, 20),
	Parent = ScriptInfo,
	BackgroundTransparency = 1,
	FontFace = Fonts.Regular,
	Text = "Saturn V7",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Bottom,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 16,
	ZIndex = 6
})

local InviteLink = createInstance("TextLabel", {
	Name = "InviteLink",
	Position = UDim2.new(0, 40, 1, 0),
	Size = UDim2.new(1, -45, 0, 18),
	Parent = ScriptInfo,
	BackgroundTransparency = 1,
	AnchorPoint = Vector2.new(0, 1),
	FontFace = Fonts.Regular,
	Text = "discord.gg/sathub",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Top,
	TextColor3 = Color3.fromRGB(161, 160, 165),
	TextSize = 12,
	ZIndex = 6
})

local formatExpiry
if LPH_OBFUSCATED then
    formatExpiry = function(seconds)
        if seconds == math.huge then
            return "Lifetime"
        elseif seconds <= 0 then
            return "Expired"
        end

        local d = math.floor(seconds / 86400)
        seconds = seconds % 86400
        local h = math.floor(seconds / 3600)
        seconds = seconds % 3600
        local m = math.floor(seconds / 60)

        return string.format("%dd, %dh, %dm", d, h, m)
    end
else
    formatExpiry = function(seconds)
        return tostring(seconds or "N/A")
    end
end

local UserInfo = createInstance("Frame", {
	Name = "UserInfo",
	Size = UDim2.new(0, 160, 0, 40),
	Parent = LeftRow,
	BackgroundTransparency = 0.7,
	AutomaticSize = Enum.AutomaticSize.X,
	BackgroundColor3 = Color3.fromRGB(0, 0, 0),
	BorderSizePixel = 0,
	ZIndex = 4
})
createInstance("UICorner", { Parent = UserInfo, CornerRadius = UDim.new(0, 6) })
createInstance("UIStroke", {
	Parent = UserInfo,
	Color = Color3.fromRGB(40, 40, 43),
	Thickness = 1,
	LineJoinMode = Enum.LineJoinMode.Round
})

local ProfileImage
    ProfileImage = createInstance("ImageLabel", {
        Name = "ProfileImage",
        Position = UDim2.new(0, 8, 0.5, 0),
        Size = UDim2.new(0, 24, 0, 24),
        Parent = UserInfo,
        BackgroundTransparency = 1,
        AnchorPoint = Vector2.new(0, 0.5),
        ImageColor3 = Color3.new(1,1,1),
        Image = game:GetService("Players"):GetUserThumbnailAsync(
            game:GetService("Players").LocalPlayer.UserId,
            Enum.ThumbnailType.HeadShot,
            Enum.ThumbnailSize.Size100x100
        ),
        ZIndex = 5
    })
Instance.new("UICorner", ProfileImage).CornerRadius = UDim.new(0, 6)

local Username = createInstance("TextLabel", {
	Name = "Username",
	Position = UDim2.new(0, 40, 0, 0),
	Size = UDim2.new(1, -45, 0, 20),
	Parent = UserInfo,
	BackgroundTransparency = 1,
	FontFace = Fonts.Regular,
	Text = player.Name,
	AutomaticSize = Enum.AutomaticSize.X,
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Bottom,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 16,
	ZIndex = 6
})

if LPH_OBFUSCATED then
	local Expiry = createInstance("TextLabel", {
		Name = "Expiry",
		Position = UDim2.new(0, 40, 1, 0),
		Size = UDim2.new(1, -45, 0, 18),
		Parent = UserInfo,
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 1),
		FontFace = Fonts.Regular,
		Text = "Expiry : " .. formatExpiry(LRM_SecondsLeft),
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Top,
		TextColor3 = Color3.fromRGB(161, 160, 165),
		TextSize = 12,
		ZIndex = 6
	})

	task.spawn(function()
		while task.wait(60) do
			Expiry.Text = "Expiry : " .. formatExpiry(LRM_SecondsLeft)
		end
	end)
end

local Username = createInstance("TextLabel", {
	Name = "Username",
	Position = UDim2.new(0, 40, 0, 0),
	Size = UDim2.new(1, -45, 0, 20),
	Parent = UserInfo,
	BackgroundTransparency = 1,
	FontFace = Fonts.Regular,
	Text = player.Name,
	AutomaticSize = Enum.AutomaticSize.X,
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Bottom,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 16,
	ZIndex = 6
})

local Expiry = createInstance("TextLabel", {
	Name = "Expiry",
	Position = UDim2.new(0, 40, 1, 0),
	Size = UDim2.new(1, -45, 0, 18),
	Parent = UserInfo,
	BackgroundTransparency = 1,
	AnchorPoint = Vector2.new(0, 1),
	FontFace = Fonts.Regular,
	Text = "Expiry : " .. formatExpiry(LRM_SecondsLeft),
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Top,
	TextColor3 = Color3.fromRGB(161, 160, 165),
	TextSize = 12,
	ZIndex = 6
})

task.spawn(function()
	while task.wait(60) do
		Expiry.Text = "Expiry : " .. formatExpiry(LRM_SecondsLeft)
	end
end)


local ThemeDropdown = createInstance("Frame", {
	Name = "ThemeDropdown",
	Size = UDim2.new(0, 160, 0, 40),
	Parent = LeftRow,
	BackgroundColor3 = Color3.fromRGB(20, 20, 22),
	BorderSizePixel = 0,
	ZIndex = 5
})
createInstance("UICorner", { Parent = ThemeDropdown, CornerRadius = UDim.new(0, 6) })
local ThemeDropdownStroke = createInstance("UIStroke", {
	Parent = ThemeDropdown,
	Color = Color3.fromRGB(40, 40, 43),
	Thickness = 1,
	LineJoinMode = Enum.LineJoinMode.Round
})

local ThemeRow = createInstance("Frame", {
	Name = "ThemeRow",
	Parent = ThemeDropdown,
	BackgroundTransparency = 1,
	Size = UDim2.new(1, 0, 1, 0)
})
createInstance("UIPadding", {
	Parent = ThemeRow,
	PaddingLeft = UDim.new(0, 10),
	PaddingRight = UDim.new(0, 10)
})
local ThemeRowLayout = createInstance("UIListLayout", {
	Parent = ThemeRow,
	FillDirection = Enum.FillDirection.Horizontal,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Padding = UDim.new(0, 8)
})

local ThemeSelectedLabel = createInstance("TextLabel", {
	Name = "ThemeSelectedLabel",
	Parent = ThemeRow,
	BackgroundTransparency = 1,
	FontFace = Fonts.Regular,
	Text = UIState.currentTheme,
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Center,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 14,
	AutomaticSize = Enum.AutomaticSize.XY,
	ZIndex = 6
})

local ThemeDropdownIcon = createInstance("ImageLabel", {
	Name = "ThemeDropdownIcon",
	Parent = ThemeRow,
	BackgroundTransparency = 1,
	AnchorPoint = Vector2.new(1, 0.5),
	ImageColor3 = Color3.fromRGB(255, 255, 255),
	Image = "rbxassetid://7072706796",
	Size = UDim2.fromOffset(14, 14),
	ZIndex = 6
})

local ThemeOptionsFrame = createInstance("Frame", {
	Name = "ThemeOptionsFrame",
	Parent = ThemeDropdown,
	Position = UDim2.new(0, 0, 1, 4),
	Size = UDim2.new(1, 0, 0, 0),
	BackgroundColor3 = Color3.fromRGB(20, 20, 22),
	BorderSizePixel = 0,
	ZIndex = 60,
	Visible = false,
	ClipsDescendants = true
})
createInstance("UICorner", { Parent = ThemeOptionsFrame, CornerRadius = UDim.new(0, 6) })
local ThemeOptionsStroke = createInstance("UIStroke", {
	Parent = ThemeOptionsFrame,
	Color = Color3.fromRGB(40, 40, 43),
	Thickness = 1
})
local ThemeOptionsLayout = createInstance("UIListLayout", {
	Parent = ThemeOptionsFrame,
	FillDirection = Enum.FillDirection.Vertical
})

local THEMES = { "Red","Light","Blue"}

local function rebuildThemeOptions()
	local keepLayout = ThemeOptionsFrame:FindFirstChildOfClass("UIListLayout")
	for _, child in pairs(ThemeOptionsFrame:GetChildren()) do
		if child ~= keepLayout then child:Destroy() end
	end
	for _, name in pairs(THEMES) do
		local btn = createInstance("TextButton", {
			Name = "ThemeOption_" .. name,
			Parent = ThemeOptionsFrame,
			Size = UDim2.new(1, 0, 0, 28),
			BackgroundColor3 = Color3.fromRGB(25, 25, 27),
			BackgroundTransparency = 0.2,
			BorderSizePixel = 0,
			FontFace = Fonts.Regular,
			Text = name,
			TextColor3 = Color3.fromRGB(200, 200, 200),
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 65
		})
		createInstance("UIPadding", { Parent = btn, PaddingLeft = UDim.new(0, 10) })

		btn.MouseEnter:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
				BackgroundTransparency = 0
			}):Play()
		end)
		btn.MouseLeave:Connect(function()
			TweenService:Create(btn, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
				BackgroundTransparency = 0.2
			}):Play()
		end)
		btn.MouseButton1Click:Connect(function()
			UIState.currentTheme = name
			ThemeSelectedLabel.Text = name
			TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {
				Size = UDim2.new(1, 0, 0, 0)
			}):Play()
			task.wait(0.18)
			ThemeOptionsFrame.Visible = false
			if typeof(updateTheme) == "function" then updateTheme() end
		end)
	end
end

local ThemeDropdownButton = createInstance("TextButton", {
	Name = "ThemeDropdownButton",
	Parent = ThemeDropdown,
	BackgroundTransparency = 1,
	Size = UDim2.new(1, 0, 1, 0),
	Text = "",
	ZIndex = 70
})
ThemeDropdownButton.MouseButton1Click:Connect(function()
	local opening = not ThemeOptionsFrame.Visible
	if opening then
		rebuildThemeOptions()
		ThemeOptionsFrame.Visible = true
		TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.18, Enum.EasingStyle.Back), {
			Size = UDim2.new(1, 0, 0, #THEMES * 28)
		}):Play()
	else
		TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {
			Size = UDim2.new(1, 0, 0, 0)
		}):Play()
		task.wait(0.18)
		ThemeOptionsFrame.Visible = false
	end
	TweenService:Create(ThemeDropdownIcon, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {
		Rotation = opening and 180 or 0
	}):Play()
end)

local CloseButton = createInstance("TextButton", {
	Name = "CloseButton",
	Parent = Header,
	AnchorPoint = Vector2.new(1, 0.5),
	Position = UDim2.new(1, -10, 0.5, 0),
	Size = UDim2.fromOffset(26, 26),
	BackgroundColor3 = Color3.fromRGB(220, 53, 69),
	BorderSizePixel = 0,
	Text = "×",
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 18,
	FontFace = Fonts.SemiBold,
	ZIndex = 10
})
createInstance("UICorner", { Parent = CloseButton, CornerRadius = UDim.new(0, 6) })
CloseButton.MouseEnter:Connect(function()
	TweenService:Create(CloseButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
		BackgroundColor3 = Color3.fromRGB(255, 70, 85)
	}):Play()
end)
CloseButton.MouseLeave:Connect(function()
	TweenService:Create(CloseButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
		BackgroundColor3 = Color3.fromRGB(220, 53, 69)
	}):Play()
end)
CloseButton.MouseButton1Click:Connect(function()
	UIState.isVisible = false
	TweenService:Create(Background, TweenInfo.new(0.25, Enum.EasingStyle.Back), {
		Size = UDim2.new(0, 0, 0, 0)
	}):Play()
	task.wait(0.25)
	Background.Visible = false
end)

do
	local UIS = game:GetService("UserInputService")

	local dragging = false
	local dragInput, dragStart, startPos

	Header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 
		or input.UserInputType == Enum.UserInputType.Touch then
			dragging  = true
			dragInput = input
			dragStart = input.Position
			startPos  = Background.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging  = false
					dragInput = nil
				end
			end)
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if dragging and input == dragInput 
		and (input.UserInputType == Enum.UserInputType.MouseMovement 
		     or input.UserInputType == Enum.UserInputType.Touch) then

			local delta = input.Position - dragStart
			Background.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y
			)
		end
	end)
end

local Main = createInstance("Frame", {
	Name = "Main",
	Position = UDim2.new(0, 0, 0.119, 0),
	Size = UDim2.new(1, 0, 0.881, 0),
	Parent = Background,
	BackgroundColor3 = Color3.fromRGB(11, 12, 14),
	BorderSizePixel = 0,
	ZIndex = 4
})

local UICorner = createInstance("UICorner", {
	Parent = Main,
	CornerRadius = UDim.new(0, 6)
})

local Div = createInstance("Frame", {
	Name = "Div",
	Position = UDim2.new(0, 0, 0, 0),
	Size = UDim2.new(1, 0, 0, 3),
	Parent = Main,
	BackgroundColor3 = Color3.fromRGB(20, 22, 26),
	BorderSizePixel = 0,
	ZIndex = 5
})

local TabHolder = createInstance("Frame", {
	Name = "TabHolder",
	Position = UDim2.new(0, 0, 0.006, 0),
	Size = UDim2.new(0, 150, 1, -3),
	Parent = Main,
	BackgroundTransparency = 1,
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderSizePixel = 0,
	ZIndex = 10
})

local TabLayout = createInstance("UIListLayout", {
	Parent = TabHolder,
	Padding = UDim.new(0, 7),
	FillDirection = Enum.FillDirection.Vertical,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Top,
	SortOrder = Enum.SortOrder.LayoutOrder
})

local TabPadding = createInstance("UIPadding", {
	Parent = TabHolder,
	PaddingTop = UDim.new(0, 10),
	PaddingLeft = UDim.new(0, 11)
})

local ScrollingFrame = createInstance("ScrollingFrame", {
	Name = "ScrollingFrame",
	Position = UDim2.new(0, 160, 0.006, 0),
	Size = UDim2.new(1, -170, 1, -3),
	Parent = Main,
	BackgroundTransparency = 1,
	ScrollBarThickness = 0,
	ClipsDescendants = true,
	BackgroundColor3 = Color3.fromRGB(255, 255, 255),
	BorderSizePixel = 0,
	ZIndex = 15,
	CanvasSize = UDim2.new(0, 0, 0, 800)
})

local ContentLayout = createInstance("UIListLayout", {
	Parent = ScrollingFrame,
	Padding = UDim.new(0, 15),
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Top,
	SortOrder = Enum.SortOrder.LayoutOrder
})

local ContentPadding = createInstance("UIPadding", {
	Parent = ScrollingFrame,
	PaddingTop = UDim.new(0, 11),
	PaddingLeft = UDim.new(0, 8)
})

local tabs = {
	{name = "Catching", icon = "rbxassetid://138815366039127", active = true},
	{name = "Physics", icon = "rbxassetid://82066392272381", active = false},
	{name = "Throwing", icon = "rbxassetid://11726391094", active = false},
	{name = "Trolling", icon = "rbxassetid://140731226103831", active = false},
	{name = "Player", icon = "rbxassetid://2795572800", active = false},
	{name = "Settings", icon = "rbxassetid://4492476121", active = false}
}

local tabElements = {}
local tabContainers = {}

for i, tabData in pairs(tabs) do
	local Tab = createInstance("Frame", {
		Name = "Tab_" .. tabData.name,
		Size = UDim2.new(0, 135, 0, 35),
		Parent = TabHolder,
		BackgroundColor3 = tabData.active and Color3.fromRGB(20, 22, 27) or Color3.fromRGB(0, 0, 0),
		BackgroundTransparency = tabData.active and 0 or 1,
		BorderSizePixel = 0,
		ZIndex = 13
	})

	local TabCorner = createInstance("UICorner", {
		Parent = Tab,
		CornerRadius = UDim.new(0, 6)
	})

	local Highlight = createInstance("Frame", {
		Name = "Highlight",
		Position = UDim2.new(0, 0, 0.5, 0),
		Size = UDim2.new(0, 3, 1, 0),
		Parent = Tab,
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundColor3 = Color3.fromRGB(248, 91, 91),
		BackgroundTransparency = tabData.active and 0 or 1,
		BorderSizePixel = 0,
		ZIndex = 14
	})

	local HighlightCorner = createInstance("UICorner", {
		Parent = Highlight,
		CornerRadius = UDim.new(1, 0)
	})

	local TabIcon = createInstance("ImageLabel", {
		Name = "TabIcon",
		Position = UDim2.new(0, 20, 0.5, 0),
		Size = UDim2.new(0, 16, 0, 16),
		Parent = Tab,
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		ImageColor3 = tabData.active and Color3.fromRGB(248, 91, 91) or Color3.fromRGB(170, 170, 170),
		Image = tabData.icon,
		BorderSizePixel = 0,
		ZIndex = 16
	})

	local TabTitle = createInstance("TextLabel", {
		Name = "TabTitle",
		Position = UDim2.new(0, 45, 0, 0),
		Size = UDim2.new(1, -50, 1, 0),
		Parent = Tab,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = tabData.name,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = tabData.active and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(170, 170, 170),
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		TextSize = 16,
		BorderSizePixel = 0,
		ZIndex = 15
	})

	local TabButton = createInstance("TextButton", {
		Name = "TabButton",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = Tab,
		BackgroundTransparency = 1,
		Text = "",
		ZIndex = 20
	})

	tabElements[i] = {
		frame = Tab,
		highlight = Highlight,
		icon = TabIcon,
		title = TabTitle,
		button = TabButton
	}

	local TabContainer = createInstance("Frame", {
		Name = "TabContainer_" .. tabData.name,
		Size = UDim2.new(0, 480, 0, 400),
		Parent = ScrollingFrame,
		BackgroundTransparency = 1,
		Visible = tabData.active,
		ZIndex = 16
	})

	local TabContainerLayout = createInstance("UIListLayout", {
		Parent = TabContainer,
		Padding = UDim.new(0, 15),
		FillDirection = Enum.FillDirection.Horizontal,
		HorizontalAlignment = Enum.HorizontalAlignment.Left,
		VerticalAlignment = Enum.VerticalAlignment.Top,
		SortOrder = Enum.SortOrder.LayoutOrder
	})

	local LeftColumn = createInstance("Frame", {
		Name = "LeftColumn",
		Size = UDim2.new(0, 230, 0, 400),
		Parent = TabContainer,
		BackgroundTransparency = 1,
		AutomaticSize = Enum.AutomaticSize.Y,
		ZIndex = 16
	})

	local LeftLayout = createInstance("UIListLayout", {
		Parent = LeftColumn,
		Padding = UDim.new(0, 10),
		FillDirection = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Left,
		VerticalAlignment = Enum.VerticalAlignment.Top,
		SortOrder = Enum.SortOrder.LayoutOrder
	})

	local RightColumn = createInstance("Frame", {
		Name = "RightColumn",
		Size = UDim2.new(0, 230, 0, 400),
		Parent = TabContainer,
		BackgroundTransparency = 1,
		LayoutOrder = 1,
		ZIndex = 16
	})

	local RightLayout = createInstance("UIListLayout", {
		Parent = RightColumn,
		Padding = UDim.new(0, 10),
		FillDirection = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Left,
		VerticalAlignment = Enum.VerticalAlignment.Top,
		SortOrder = Enum.SortOrder.LayoutOrder
	})

	tabContainers[tabData.name] = {
		container = TabContainer,
		left = LeftColumn,
		right = RightColumn
	}
end

function updateTheme()
	local theme = getCurrentTheme()

	Background.BackgroundColor3 = theme.Background
	Main.BackgroundColor3 = theme.Background
	Div.BackgroundColor3 = theme.Stroke

	Title.TextColor3 = theme.Text
	InviteLink.TextColor3 = theme.TextSecondary
	Username.TextColor3 = theme.Text
	Expiry.TextColor3 = theme.TextSecondary

	ThemeDropdown.BackgroundColor3 = theme.Secondary
	ThemeDropdownStroke.Color = theme.Stroke
	ThemeSelectedLabel.TextColor3 = theme.Text
	ThemeDropdownIcon.ImageColor3 = theme.Text
	ThemeOptionsFrame.BackgroundColor3 = theme.Secondary
	ThemeOptionsStroke.Color = theme.Stroke

	for i, elements in pairs(tabElements) do
		local active = tabs[i].active
		elements.highlight.BackgroundColor3 = theme.Accent
		if active then
			elements.frame.BackgroundTransparency = 0
			elements.frame.BackgroundColor3 = theme.Secondary
			elements.icon.ImageColor3 = theme.Accent
			elements.title.TextColor3 = theme.Text
		else
			elements.frame.BackgroundTransparency = 1
			elements.icon.ImageColor3 = Color3.fromRGB(170,170,170)
			elements.title.TextColor3 = Color3.fromRGB(170,170,170)
		end
	end
end

local function switchTab(tabName)
	UIState.currentTab = tabName
	
	for i, tabData in pairs(tabs) do
		tabData.active = (tabData.name == tabName)
		local elements = tabElements[i]
		
		TweenService:Create(elements.highlight, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			BackgroundTransparency = tabData.active and 0 or 1,
			BackgroundColor3 = tabData.active and Color3.fromRGB(248, 91, 91) or Color3.fromRGB(0,0,0)
		}):Play()
		
		TweenService:Create(elements.highlight, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			BackgroundTransparency = tabData.active and 0 or 1
		}):Play()
		
		TweenService:Create(elements.icon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			ImageColor3 = tabData.active and Color3.fromRGB(248, 91, 91) or Color3.fromRGB(170, 170, 170)
		}):Play()
		
		TweenService:Create(elements.title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			TextColor3 = tabData.active and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(170, 170, 170)
		}):Play()
		
		TweenService:Create(elements.frame, TweenInfo.new(0.1, Enum.EasingStyle.Back), {
			Size = tabData.active and UDim2.new(0, 140, 0, 35) or UDim2.new(0, 135, 0, 35)
		}):Play()
	end
	
	for name, container in pairs(tabContainers) do
		container.container.Visible = (name == tabName)
	end
end

for i, elements in pairs(tabElements) do
	elements.button.MouseButton1Click:Connect(function()
		switchTab(tabs[i].name)
	end)
	
	elements.button.MouseEnter:Connect(function()
		if not tabs[i].active then
			TweenService:Create(elements.frame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
				BackgroundTransparency = 0.8
			}):Play()
		end
	end)
	
	elements.button.MouseLeave:Connect(function()
		if not tabs[i].active then
			TweenService:Create(elements.frame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
				BackgroundTransparency = 1
			}):Play()
		end
	end)
end

local function createSection(parent, title)
	local Section = createInstance("Frame", {
		Name = "Section_" .. title,
		Size = UDim2.new(0, 230, 0, 0),
		Parent = parent,
		AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0,
		ZIndex = 16
	})

	local UIGradient = createInstance("UIGradient", {
		Parent = Section,
		Rotation = 90,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(14, 16, 17)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(14, 16, 17)),
		}),
		Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
	})

	local UIStroke = createInstance("UIStroke", {
		Parent = Section,
		Color = Color3.fromRGB(21, 23, 26),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Round,
		Transparency = 0
	})

	local SectionCorner = createInstance("UICorner", {
		Parent = Section,
		CornerRadius = UDim.new(0, 4)
	})

	local SectionPadding = createInstance("UIPadding", {
		Parent = Section,
		PaddingBottom = UDim.new(0, 5),
		PaddingTop = UDim.new(0, 5),
		PaddingLeft = UDim.new(0, 15),
		PaddingRight = UDim.new(0, 15)
	})

	local SectionLayout = createInstance("UIListLayout", {
		Parent = Section,
		Padding = UDim.new(0, 2),
		FillDirection = Enum.FillDirection.Vertical,
		HorizontalAlignment = Enum.HorizontalAlignment.Left,
		VerticalAlignment = Enum.VerticalAlignment.Top,
		SortOrder = Enum.SortOrder.LayoutOrder
	})

	return Section
end

local function createToggleElement(parent, text, defaultValue, callback, keybind)
	UIState.toggles[text] = defaultValue or false
	UIState.keybinds = UIState.keybinds or {}

	local UIS = game:GetService("UserInputService")

	local function resolveKey(k)
		if typeof(k) == "EnumItem" and k.EnumType == Enum.KeyCode then return k end
		if typeof(k) == "string" and Enum.KeyCode[k] then return Enum.KeyCode[k] end
		return nil
	end

	local bindCode = resolveKey(UIState.keybinds[text]) or resolveKey(keybind)
	UIState.keybinds[text] = bindCode

	local Toggle = createInstance("Frame", {
		Name = "Toggle_" .. text,
		Size = UDim2.new(0, 200, 0, 25),
		Parent = parent,
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		ZIndex = 26
	})

	local TextLabel = createInstance("TextLabel", {
		Name = "TextLabel",
		Size = UDim2.new(0, 140, 1, 0),
		Parent = Toggle,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = text,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = UIState.toggles[text] and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(156, 156, 156),
		TextSize = 15,
		ZIndex = 27
	})

	local ToggleFrame = createInstance("Frame", {
		Name = "ToggleFrame",
		Position = UDim2.new(1, -32, 0.5, 0),
		Size = UDim2.new(0, 32, 0, 16),
		Parent = Toggle,
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundColor3 = UIState.toggles[text] and Color3.fromRGB(218, 80, 80) or Color3.fromRGB(20, 20, 22),
		BorderSizePixel = 0,
		ZIndex = 28
	})
	createInstance("UICorner", {Parent = ToggleFrame, CornerRadius = UDim.new(0, 4)})

	local ToggleIcon = createInstance("ImageLabel", {
		Name = "ToggleIcon",
		Position = UDim2.new(UIState.toggles[text] and 0.58 or 0.15, 0, 0.5, 0),
		Size = UDim2.new(0, 8, 0, 8),
		Parent = ToggleFrame,
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 0.5),
		ImageColor3 = UIState.toggles[text] and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(85, 90, 101),
		Image = "rbxassetid://5825681337",
		ZIndex = 30
	})

	local ToggleStroke = createInstance("UIStroke", {
		Parent = ToggleFrame,
		Color = UIState.toggles[text] and Color3.fromRGB(242, 121, 121) or Color3.fromRGB(20, 20, 22),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Round,
		Transparency = 0
	})

	local KeybindLabel = createInstance("TextButton", {
		Name = "KeybindLabel",
		Position = UDim2.new(0, 120, 0.5, 0),
		Size = UDim2.new(0, 80, 0, 16),
		Parent = Toggle,
		BackgroundColor3 = Color3.fromRGB(15, 17, 20),
        BackgroundTransparency = 1,
		BorderSizePixel = 0,
		AnchorPoint = Vector2.new(0, 0.5),
		FontFace = Fonts.Regular,
		Text = bindCode and ("[ " .. bindCode.Name .. " ]") or "[bind]",
		TextXAlignment = Enum.TextXAlignment.Center,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = Color3.fromRGB(180, 180, 180),
		TextSize = 11,
		ZIndex = 50,
		AutoButtonColor = false,
		AutomaticSize = Enum.AutomaticSize.X
	})
	createInstance("UICorner", {Parent = KeybindLabel, CornerRadius = UDim.new(0, 3)})
	local KeybindStroke = createInstance("UIStroke", {
		Parent = KeybindLabel,
		Color = Color3.fromRGB(40, 42, 46),
		Thickness = 1,
		Transparency = 0.3
	})

	local function _fitLabel()
		local w = math.max(54, KeybindLabel.TextBounds.X + 12)
		KeybindLabel.Size = UDim2.new(0, w, 0, 16)
	end
	_fitLabel()
	KeybindLabel:GetPropertyChangedSignal("Text"):Connect(_fitLabel)

	local ToggleButton = createInstance("TextButton", {
		Name = "ToggleButton",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = Toggle,
		BackgroundTransparency = 1,
		Text = "",
		ZIndex = 35
	})

	local function setVisual(isEnabled)
		TweenService:Create(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = isEnabled and Color3.fromRGB(255,255,255) or Color3.fromRGB(156,156,156)}):Play()
		TweenService:Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = isEnabled and Color3.fromRGB(218,80,80) or Color3.fromRGB(20,20,22)}):Play()
		TweenService:Create(ToggleIcon, TweenInfo.new(0.3, Enum.EasingStyle.Back), {Position = UDim2.new(isEnabled and 0.58 or 0.15, 0, 0.5, 0), ImageColor3 = isEnabled and Color3.fromRGB(255,255,255) or Color3.fromRGB(85,90,101)}):Play()
		TweenService:Create(ToggleStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Color = isEnabled and Color3.fromRGB(242,121,121) or Color3.fromRGB(20,20,22)}):Play()
	end

	local function bump()
		TweenService:Create(ToggleFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 35, 0, 16)}):Play()
		task.wait(0.05)
		TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Back), {Size = UDim2.new(0, 32, 0, 16)}):Play()
	end

	local function toggleNow()
		UIState.toggles[text] = not UIState.toggles[text]
		bump()
		setVisual(UIState.toggles[text])
		if callback then callback(UIState.toggles[text]) end
	end

	ToggleButton.MouseButton1Click:Connect(toggleNow)
	ToggleButton.MouseEnter:Connect(function()
		TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 34, 0, 18)}):Play()
		TweenService:Create(KeybindLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(200,200,200)}):Play()
	end)
	ToggleButton.MouseLeave:Connect(function()
		TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 32, 0, 16)}):Play()
		TweenService:Create(KeybindLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(180,180,180)}):Play()
	end)

	local capturing = false
	local function setLabel(state, keycode)
		if state == "idle" then
			KeybindLabel.Text = bindCode and ("[ " .. bindCode.Name .. " ]") or "[bind]"
			TweenService:Create(KeybindStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Transparency = 0.3, Color = Color3.fromRGB(40,42,46)}):Play()
			TweenService:Create(KeybindLabel, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(15,17,20), TextColor3 = Color3.fromRGB(180,180,180)}):Play()
		elseif state == "arming" then
			KeybindLabel.Text = "[...]"
			TweenService:Create(KeybindStroke, TweenInfo.new(0.05, Enum.EasingStyle.Quad), {Transparency = 0, Color = Color3.fromRGB(248,91,91)}):Play()
			TweenService:Create(KeybindLabel, TweenInfo.new(0.05, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(25,27,30), TextColor3 = Color3.fromRGB(248,91,91)}):Play()
		elseif state == "set" then
			KeybindLabel.Text = "[ " .. keycode.Name .. " ]"
			TweenService:Create(KeybindStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Transparency = 0.1, Color = Color3.fromRGB(100,102,106)}):Play()
			TweenService:Create(KeybindLabel, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(18,20,23), TextColor3 = Color3.fromRGB(210,210,210)}):Play()
		elseif state == "cleared" then
			KeybindLabel.Text = "[bind]"
			TweenService:Create(KeybindStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Transparency = 0.3, Color = Color3.fromRGB(40,42,46)}):Play()
			TweenService:Create(KeybindLabel, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(15,17,20), TextColor3 = Color3.fromRGB(180,180,180)}):Play()
		end
	end
	setLabel("idle")

	KeybindLabel.MouseButton1Click:Connect(function()
		capturing = true
		setLabel("arming")
	end)

	local inputConn
	inputConn = UIS.InputBegan:Connect(function(input, gp)
		if capturing then
			if input.UserInputType == Enum.UserInputType.Keyboard then
				if input.KeyCode == Enum.KeyCode.Escape or input.KeyCode == Enum.KeyCode.Backspace then
					bindCode = nil
					UIState.keybinds[text] = nil
					capturing = false
					setLabel("cleared"); return
				end
				if input.KeyCode ~= Enum.KeyCode.Unknown then
					bindCode = input.KeyCode
					UIState.keybinds[text] = bindCode
					capturing = false
					setLabel("set", bindCode); return
				end
			end
			return
		end
		if not gp and bindCode and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == bindCode then
			toggleNow()
		end
	end)

	Toggle.AncestryChanged:Connect(function(_, parent)
		if not parent and inputConn then inputConn:Disconnect(); inputConn = nil end
	end)
	UIRegistry.toggles[text] = {
    Set = function(val)
        val = not not val
        UIState.toggles[text] = val
        setVisual(val)
        if callback then callback(val) end
    end,
		SetBind = function(kc)
			local resolveKey = function(k)
				if typeof(k) == "EnumItem" and k.EnumType == Enum.KeyCode then return k end
				if typeof(k) == "string" and Enum.KeyCode[k] then return Enum.KeyCode[k] end
			end
			local resolved = resolveKey(kc)
			UIState.keybinds[text] = resolved
			if resolved then
				setLabel("set", resolved)
			else
				setLabel("cleared")
			end
		end
	}

	return Toggle
end

local function createSliderElement(parent, text, defaultValue, minValue, maxValue, suffix, callback)
    local STEP = 0.1
    local function roundStep(v)
        return math.clamp(math.floor((v / STEP) + 0.5) * STEP, minValue, maxValue)
    end

    defaultValue = tonumber(defaultValue) or minValue or 0
    minValue = tonumber(minValue) or 0
    maxValue = tonumber(maxValue) or 1
    suffix = suffix or ""

    UIState.sliders[text] = roundStep(defaultValue)

    local Slider = createInstance("Frame", {
        Name = "Slider_" .. text,
        Size = UDim2.new(0, 200, 0, 38),
        Parent = parent,
        BackgroundTransparency = 1,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        ZIndex = 20
    })

    local TextLabel = createInstance("TextLabel", {
        Name = "TextLabel",
        Size = UDim2.new(0, 120, 0, 25),
        Parent = Slider,
        BackgroundTransparency = 1,
        FontFace = Fonts.Regular,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextColor3 = Color3.fromRGB(156, 156, 156),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 15,
        BorderSizePixel = 0,
        ZIndex = 27
    })

    local ValueBox = createInstance("TextBox", {
        Name = "ValueBox",
        Position = UDim2.new(1, -50, 0, 0),
        Size = UDim2.new(0, 45, 0, 25),
        Parent = Slider,
        BackgroundTransparency = 1,
        FontFace = Fonts.Regular,
        Text = string.format("%.1f", UIState.sliders[text]) .. suffix,
        TextXAlignment = Enum.TextXAlignment.Right,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextColor3 = Color3.fromRGB(156, 156, 156),
        ClearTextOnFocus = false,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 15,
        BorderSizePixel = 0,
        ZIndex = 27
    })

    local SliderTrack = createInstance("Frame", {
        Name = "SliderTrack",
        Position = UDim2.new(0, 0, 0, 27),
        Size = UDim2.new(0, 190, 0, 4),
        Parent = Slider,
        BackgroundColor3 = Color3.fromRGB(20, 20, 22),
        BorderSizePixel = 0,
        ZIndex = 25
    })

    local HitArea = createInstance("Frame", {
        Name = "HitArea",
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(0, 190, 0, 18),
        Parent = Slider,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ZIndex = 26
    })

    local function pctFromX(absX)
        return math.clamp((absX - SliderTrack.AbsolutePosition.X) / math.max(1, SliderTrack.AbsoluteSize.X), 0, 1)
    end

    local function pctFromInput(input)
        return pctFromX(input.Position.X)
    end

    local startPct = (UIState.sliders[text] - minValue) / (maxValue - minValue)
    local SliderFill = createInstance("Frame", {
        Name = "SliderFill",
        Size = UDim2.new(startPct, 0, 1, 0),
        Parent = SliderTrack,
        BackgroundColor3 = Color3.fromRGB(232, 232, 255),
        BorderSizePixel = 0,
        ZIndex = 25
    })

    local SliderGradient = createInstance("UIGradient", {
        Parent = SliderFill,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 36, 36)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(181, 79, 79)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })

    local SliderStroke = createInstance("UIStroke", {
        Parent = SliderFill,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 1,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })

    local SliderStrokeGradient = createInstance("UIGradient", {
        Parent = SliderStroke,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(221, 80, 80)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(112, 47, 47)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })

    local SliderFillCorner = createInstance("UICorner", {
        Parent = SliderFill,
        CornerRadius = UDim.new(1, 0)
    })

    local SliderHandle = createInstance("Frame", {
        Name = "SliderHandle",
        Position = UDim2.new(1, 0, 0.5, 0),
        Size = UDim2.new(0, 3, 0, 8),
        Parent = SliderFill,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(170, 170, 170),
        BorderSizePixel = 0,
        ZIndex = 30
    })

    local HandleStroke = createInstance("UIStroke", {
        Parent = SliderHandle,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 1,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })

    local HandleCorner = createInstance("UICorner", {
        Parent = SliderHandle,
        CornerRadius = UDim.new(1, 0)
    })

    local TrackCorner = createInstance("UICorner", {
        Parent = SliderTrack,
        CornerRadius = UDim.new(1, 0)
    })

    local TrackStroke = createInstance("UIStroke", {
        Parent = SliderTrack,
        Color = Color3.fromRGB(20, 20, 22),
        Thickness = 1,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })

    local dragging = false

    local function applyValue(val)
        val = roundStep(val)
        UIState.sliders[text] = val
        local pct = (val - minValue) / (maxValue - minValue)
        TweenService:Create(SliderFill, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            Size = UDim2.new(pct, 0, 1, 0)
        }):Play()
        ValueBox.Text = string.format("%.1f", val) .. suffix
        if callback then callback(val) end
    end

    local function updateFromPct(pct)
        local val = minValue + (maxValue - minValue) * pct
        applyValue(val)
    end

    local function updateSliderFromInput(input)
        updateFromPct(pctFromInput(input))
    end

    local function beginDrag(input)
        dragging = true
        updateSliderFromInput(input)
        TweenService:Create(SliderHandle, TweenInfo.new(0.1, Enum.EasingStyle.Back), {
            Size = UDim2.new(0, 5, 0, 12)
        }):Play()
    end

    local function endDrag()
        dragging = false
        TweenService:Create(SliderHandle, TweenInfo.new(0.1, Enum.EasingStyle.Back), {
            Size = UDim2.new(0, 3, 0, 8)
        }):Play()
    end

    local function tryBegin(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            beginDrag(input)
        end
    end

    HitArea.InputBegan:Connect(tryBegin)
    SliderTrack.InputBegan:Connect(tryBegin)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSliderFromInput(input)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            endDrag()
        end
    end)

    ValueBox.Focused:Connect(function()
        local onlyNumber = tostring(UIState.sliders[text])
        ValueBox.Text = string.format("%.1f", tonumber(onlyNumber) or UIState.sliders[text])
    end)

    ValueBox.FocusLost:Connect(function(enterPressed)
        local raw = ValueBox.Text
        local num = tonumber((raw:gsub("[^%d%.%-]", "")))
        if num == nil then
            ValueBox.Text = string.format("%.1f", UIState.sliders[text]) .. suffix
            return
        end
        applyValue(num)
    end)

    UIRegistry.sliders[text] = {
        Set = function(val)
            applyValue(tonumber(val) or minValue)
        end,
        Get = function()
            return UIState.sliders[text]
        end
    }

    return Slider
end

local function createDropdownElement(parent, text, options, defaultIndex, callback)
	local resolvedIndex
	if typeof(defaultIndex) == "number" and options[defaultIndex] then
		resolvedIndex = defaultIndex
	elseif typeof(defaultIndex) == "string" then
		for i, v in pairs(options) do if v == defaultIndex then resolvedIndex = i break end end
	end
	resolvedIndex = resolvedIndex or (UIState.dropdowns[text] and UIState.dropdowns[text].selectedIndex) or 1

	UIState.dropdowns[text] = { options = options, selectedIndex = resolvedIndex, isOpen = false }

	local Dropdown = createInstance("Frame", {
		Name = "Dropdown_" .. text,
		Size = UDim2.new(0, 200, 0, 53),
		Parent = parent,
		BackgroundTransparency = 1,
		ZIndex = 20
	})

	local TextLabel = createInstance("TextLabel", {
		Name = "TextLabel",
		Size = UDim2.new(0, 140, 0, 25),
		Parent = Dropdown,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = text,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = Color3.fromRGB(156, 156, 156),
		TextSize = 15,
		ZIndex = 27
	})

	local DropdownFrame = createInstance("Frame", {
		Name = "DropdownFrame",
		Position = UDim2.new(0, 0, 0, 25),
		Size = UDim2.new(0, 190, 0, 22),
		Parent = Dropdown,
		BackgroundColor3 = Color3.fromRGB(20, 20, 22),
		BorderSizePixel = 0,
		ZIndex = 25
	})
	createInstance("UICorner", {Parent = DropdownFrame, CornerRadius = UDim.new(0, 4)})

	local SelectedLabel = createInstance("TextLabel", {
		Name = "SelectedLabel",
		Position = UDim2.new(0, 5, 0, 0),
		Size = UDim2.new(1, -25, 1, 0),
		Parent = DropdownFrame,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = options[UIState.dropdowns[text].selectedIndex] or options[1] or "",
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = Color3.fromRGB(117, 117, 117),
		TextSize = 15,
		ZIndex = 27
	})

	local DropdownIcon = createInstance("ImageLabel", {
		Name = "DropdownIcon",
		Position = UDim2.new(1, -18, 0.5, 0),
		Size = UDim2.new(0, 12, 0, 12),
		Parent = DropdownFrame,
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 0.5),
		ImageColor3 = Color3.fromRGB(85, 90, 101),
		Image = "rbxassetid://7072706796",
		ZIndex = 30
	})

	local DropdownButton = createInstance("TextButton", {
		Name = "DropdownButton",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = DropdownFrame,
		BackgroundTransparency = 1,
		Text = "",
		ZIndex = 35
	})

	local OptionsFrame = createInstance("Frame", {
		Name = "OptionsFrame",
		Position = UDim2.new(0, 0, 1, 2),
		Size = UDim2.new(1, 0, 0, 0),
		Parent = DropdownFrame,
		BackgroundColor3 = Color3.fromRGB(20, 20, 22),
		BorderSizePixel = 0,
		ZIndex = 40,
		Visible = false,
		ClipsDescendants = true
	})
	createInstance("UICorner", {Parent = OptionsFrame, CornerRadius = UDim.new(0, 4)})
	createInstance("UIListLayout", {Parent = OptionsFrame, SortOrder = Enum.SortOrder.LayoutOrder})

	for i, option in pairs(options) do
		local OptionButton = createInstance("TextButton", {
			Name = "Option_" .. i,
			Size = UDim2.new(1, 0, 0, 25),
			Parent = OptionsFrame,
			BackgroundColor3 = Color3.fromRGB(25, 25, 27),
			BackgroundTransparency = 0.5,
			FontFace = Fonts.Regular,
			Text = option,
			TextColor3 = Color3.fromRGB(200, 200, 200),
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			ZIndex = 45
		})
		createInstance("UIPadding", {Parent = OptionButton, PaddingLeft = UDim.new(0, 8)})

		OptionButton.MouseButton1Click:Connect(function()
			UIRegistry.dropdowns[text].SetIndex(i)
			UIState.dropdowns[text].isOpen = false
			TweenService:Create(OptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(1, 0, 0, 0)}):Play()
			TweenService:Create(DropdownIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Rotation = 0}):Play()
			task.wait(0.2)
			OptionsFrame.Visible = false
		end)
	end

	DropdownButton.MouseButton1Click:Connect(function()
		local isOpen = not UIState.dropdowns[text].isOpen
		UIState.dropdowns[text].isOpen = isOpen
		if isOpen then
			OptionsFrame.Visible = true
			TweenService:Create(OptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Back), {Size = UDim2.new(1, 0, 0, #options * 25)}):Play()
		else
			TweenService:Create(OptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(1, 0, 0, 0)}):Play()
			task.wait(0.2)
			OptionsFrame.Visible = false
		end
		TweenService:Create(DropdownIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Rotation = isOpen and 180 or 0}):Play()
	end)

	UIRegistry.dropdowns[text] = {
		SetIndex = function(i, silent)
			i = math.clamp(i, 1, #UIState.dropdowns[text].options)
			UIState.dropdowns[text].selectedIndex = i
			SelectedLabel.Text = UIState.dropdowns[text].options[i]

			if not silent and callback then
				callback(UIState.dropdowns[text].options[i], i)
			end
		end,

		SetOptions = function(newOpts, selectIndex)
			if not newOpts or #newOpts == 0 then newOpts = {"No saved configs"} end
			UIState.dropdowns[text].options = newOpts

			for _, c in pairs(OptionsFrame:GetChildren()) do
				if c:IsA("TextButton") then c:Destroy() end
			end
			for idx, opt in pairs(newOpts) do
				local btn = createInstance("TextButton", {
					Size = UDim2.new(1, 0, 0, 25),
					Parent = OptionsFrame,
					BackgroundColor3 = Color3.fromRGB(25, 25, 27),
					BackgroundTransparency = 0.5,
					Text = opt,
					TextColor3 = Color3.fromRGB(200, 200, 200),
					TextSize = 14,
					TextXAlignment = Enum.TextXAlignment.Left
				})
				createInstance("UIPadding", {Parent = btn, PaddingLeft = UDim.new(0, 8)})

				btn.MouseButton1Click:Connect(function()
					UIRegistry.dropdowns[text].SetIndex(idx)
					UIState.dropdowns[text].isOpen = false
					OptionsFrame.Visible = false
				end)
			end

			UIRegistry.dropdowns[text].SetIndex(selectIndex or 1, true)
		end
	}

	return Dropdown
end

local function createButtonElement(parent, text, callback)
	local Button = createInstance("Frame", {
		Name = "Button_" .. text,
		Size = UDim2.new(0, 200, 0, 30),
		Parent = parent,
		BackgroundTransparency = 1,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0,
		ZIndex = 26
	})

	local ButtonFrame = createInstance("Frame", {
		Name = "ButtonFrame",
		Size = UDim2.new(0, 190, 1, 0),
		Parent = Button,
		BackgroundColor3 = Color3.fromRGB(218, 80, 80),
		BorderSizePixel = 0,
		ZIndex = 28
	})

	local ButtonGradient = createInstance("UIGradient", {
		Parent = ButtonFrame,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(112, 42, 42)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(218, 80, 80)),
		}),
		Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
	})

	local ButtonCorner = createInstance("UICorner", {
		Parent = ButtonFrame,
		CornerRadius = UDim.new(0, 4)
	})

	local ButtonStroke = createInstance("UIStroke", {
		Parent = ButtonFrame,
		Color = Color3.fromRGB(195, 73, 81),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Round,
		Transparency = 0
	})

	local ButtonLabel = createInstance("TextLabel", {
		Name = "ButtonLabel",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = ButtonFrame,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = text,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		TextSize = 15,
		BorderSizePixel = 0,
		ZIndex = 30
	})

	local ButtonClick = createInstance("TextButton", {
		Name = "ButtonClick",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = ButtonFrame,
		BackgroundTransparency = 1,
		Text = "",
		ZIndex = 35
	})

	ButtonClick.MouseButton1Click:Connect(function()
		TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			Size = UDim2.new(0, 185, 0, 28)
		}):Play()
		task.wait(0.05)
		TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Back), {
			Size = UDim2.new(0, 190, 1, 0)
		}):Play()
		if callback then callback() end
	end)

	ButtonClick.MouseEnter:Connect(function()
		TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			BackgroundColor3 = Color3.fromRGB(230, 90, 90)
		}):Play()
	end)

	ButtonClick.MouseLeave:Connect(function()
		TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			BackgroundColor3 = Color3.fromRGB(218, 80, 80)
		}):Play()
	end)

	return Button
end

local ColorPickerPopup = createInstance("Frame", {
	Name = "ColorPickerPopup",
	Position = UDim2.new(0.5, 0, 0.5, 0),
	Size = UDim2.new(0, 0, 0, 0),
	Parent = ScreenGui,
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Color3.fromRGB(25, 25, 27),
	BorderSizePixel = 0,
	ZIndex = 100,
	Visible = false,
	ClipsDescendants = true
})

local ColorPickerCorner = createInstance("UICorner", {
	Parent = ColorPickerPopup,
	CornerRadius = UDim.new(0, 8)
})

local ColorPickerStroke = createInstance("UIStroke", {
	Parent = ColorPickerPopup,
	Color = Color3.fromRGB(60, 60, 65),
	Thickness = 2,
	LineJoinMode = Enum.LineJoinMode.Round,
	Transparency = 0
})

local ColorPickerTitle = createInstance("TextLabel", {
	Name = "ColorPickerTitle",
	Position = UDim2.new(0, 15, 0, 10),
	Size = UDim2.new(1, -30, 0, 25),
	Parent = ColorPickerPopup,
	BackgroundTransparency = 1,
	FontFace = Fonts.Medium,
	Text = "Color Picker",
	TextXAlignment = Enum.TextXAlignment.Left,
	TextYAlignment = Enum.TextYAlignment.Center,
	TextColor3 = Color3.fromRGB(255, 255, 255),
	TextSize = 13,
	ZIndex = 101
})

local ColorGrid = createInstance("Frame", {
	Name = "ColorGrid",
	Position = UDim2.new(0, 15, 0, 45),
	Size = UDim2.new(1, -30, 0, 120),
	Parent = ColorPickerPopup,
	BackgroundTransparency = 1,
	ZIndex = 101
})

local ColorGridLayout = createInstance("UIGridLayout", {
	Parent = ColorGrid,
	CellSize = UDim2.new(0, 25, 0, 25),
	CellPadding = UDim2.new(0, 5, 0, 5),
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Top,
	SortOrder = Enum.SortOrder.LayoutOrder
})

local colors = {
	Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(127, 255, 0),
	Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 255, 127), Color3.fromRGB(0, 255, 255), Color3.fromRGB(0, 127, 255),
	Color3.fromRGB(0, 0, 255), Color3.fromRGB(127, 0, 255), Color3.fromRGB(255, 0, 255), Color3.fromRGB(255, 0, 127),
	Color3.fromRGB(255, 255, 255), Color3.fromRGB(192, 192, 192), Color3.fromRGB(128, 128, 128), Color3.fromRGB(64, 64, 64),
	Color3.fromRGB(0, 0, 0), Color3.fromRGB(139, 69, 19), Color3.fromRGB(255, 192, 203), Color3.fromRGB(255, 165, 0)
}

local currentColorCallback = nil
local currentColorFrame = nil

for i, color in pairs(colors) do
	local ColorSwatch = createInstance("TextButton", {
		Name = "ColorSwatch_" .. i,
		Size = UDim2.new(0, 25, 0, 25),
		Parent = ColorGrid,
		BackgroundColor3 = color,
		BorderSizePixel = 0,
		ZIndex = 102,
		Text = ""
	})

	local ColorSwatchCorner = createInstance("UICorner", {
		Parent = ColorSwatch,
		CornerRadius = UDim.new(0, 4)
	})

	local ColorSwatchStroke = createInstance("UIStroke", {
		Parent = ColorSwatch,
		Color = Color3.fromRGB(100, 100, 100),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Round,
		Transparency = 0
	})

	ColorSwatch.MouseButton1Click:Connect(function()
		if currentColorCallback then
			currentColorCallback(color)
		end
		if currentColorFrame then
			TweenService:Create(currentColorFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
				BackgroundColor3 = color
			}):Play()
		end
		TweenService:Create(ColorPickerPopup, TweenInfo.new(0.2, Enum.EasingStyle.Back), {
			Size = UDim2.new(0, 0, 0, 0)
		}):Play()
		task.wait(0.2)
		ColorPickerPopup.Visible = false
	end)

	ColorSwatch.MouseEnter:Connect(function()
		TweenService:Create(ColorSwatch, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			Size = UDim2.new(0, 28, 0, 28)
		}):Play()
		TweenService:Create(ColorSwatchStroke, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			Color = Color3.fromRGB(255, 255, 255)
		}):Play()
	end)

	ColorSwatch.MouseLeave:Connect(function()
		TweenService:Create(ColorSwatch, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			Size = UDim2.new(0, 25, 0, 25)
		}):Play()
		TweenService:Create(ColorSwatchStroke, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			Color = Color3.fromRGB(100, 100, 100)
		}):Play()
	end)
end

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local ColorPicker = {}

local function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        if typeof(k) ~= 'string' then continue end
        instance[k] = v
    end
    return instance
end

local function clamp01(x) 
    return math.clamp(x, 0, 1) 
end

local function toHex(color)
    local r = math.floor(color.R * 255 + 0.5)
    local g = math.floor(color.G * 255 + 0.5)
    local b = math.floor(color.B * 255 + 0.5)
    return string.format("#%02X%02X%02X", r, g, b)
end

local function fromHex(hex)
    hex = hex:gsub("#", "")
    if #hex == 3 then 
        hex = hex:sub(1,1):rep(2) .. hex:sub(2,2):rep(2) .. hex:sub(3,3):rep(2) 
    end
    if #hex ~= 6 then return nil end
    local r = tonumber(hex:sub(1,2), 16) or 255
    local g = tonumber(hex:sub(3,4), 16) or 255
    local b = tonumber(hex:sub(5,6), 16) or 255
    return Color3.fromRGB(r, g, b)
end

local function HSVtoRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    local imod = i % 6
    if imod == 0 then
        r, g, b = v, t, p
    elseif imod == 1 then
        r, g, b = q, v, p
    elseif imod == 2 then
        r, g, b = p, v, t
    elseif imod == 3 then
        r, g, b = p, q, v
    elseif imod == 4 then
        r, g, b = t, p, v
    elseif imod == 5 then
        r, g, b = v, p, q
    end
    return Color3.fromRGB(r * 255, g * 255, b * 255)
end

local function RGBtoHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max = math.max(r, g, b)
    local min = math.min(r, g, b)
    local delta = max - min
    local h, s, v = 0, 0, max
    if max ~= 0 then
        s = delta / max
    end
    if delta ~= 0 then
        if max == r then
            h = (g - b) / delta
            if g < b then h = h + 6 end
        elseif max == g then
            h = (b - r) / delta + 2
        elseif max == b then
            h = (r - g) / delta + 4
        end
        h = h / 6
    end
    return h, s, v
end

local Fonts = {
    Regular = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular),
    Medium = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium),
    SemiBold = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold),
    Bold = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold)
}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local ColorPickerModule = {}

local function clamp01(x) 
    return math.clamp(x, 0, 1) 
end

local function toHex(color)
    local r = math.floor(color.R * 255 + 0.5)
    local g = math.floor(color.G * 255 + 0.5)
    local b = math.floor(color.B * 255 + 0.5)
    return string.format("#%02X%02X%02X", r, g, b)
end

local function fromHex(hex)
    hex = hex:gsub("#", "")
    if #hex == 3 then 
        hex = hex:sub(1,1):rep(2) .. hex:sub(2,2):rep(2) .. hex:sub(3,3):rep(2) 
    end
    if #hex ~= 6 then return nil end
    local r = tonumber(hex:sub(1,2), 16) or 255
    local g = tonumber(hex:sub(3,4), 16) or 255
    local b = tonumber(hex:sub(5,6), 16) or 255
    return Color3.fromRGB(r, g, b)
end

local function HSVtoRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    local imod = i % 6
    if imod == 0 then
        r, g, b = v, t, p
    elseif imod == 1 then
        r, g, b = q, v, p
    elseif imod == 2 then
        r, g, b = p, v, t
    elseif imod == 3 then
        r, g, b = p, q, v
    elseif imod == 4 then
        r, g, b = t, p, v
    elseif imod == 5 then
        r, g, b = v, p, q
    end
    return Color3.fromRGB(r * 255, g * 255, b * 255)
end

local function RGBtoHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max = math.max(r, g, b)
    local min = math.min(r, g, b)
    local delta = max - min
    local h, s, v = 0, 0, max
    if max ~= 0 then
        s = delta / max
    end
    if delta ~= 0 then
        if max == r then
            h = (g - b) / delta
            if g < b then h = h + 6 end
        elseif max == g then
            h = (b - r) / delta + 2
        elseif max == b then
            h = (r - g) / delta + 4
        end
        h = h / 6
    end
    return h, s, v
end

function ColorPickerModule.createAdvancedPopup(startColor, onColorChanged, onClose)
    local player = game.Players.LocalPlayer
    local root = player:WaitForChild("PlayerGui")
    
    local Overlay = Instance.new("Frame")
    Overlay.Name = "ColorPickerOverlay"
    Overlay.Parent = root
    Overlay.Size = UDim2.fromScale(1, 1)
    Overlay.BackgroundColor3 = Color3.new(0, 0, 0)
    Overlay.BackgroundTransparency = 1
    Overlay.ZIndex = 5000
    
    local OverlayButton = Instance.new("TextButton")
    OverlayButton.Parent = Overlay
    OverlayButton.Size = UDim2.fromScale(1, 1)
    OverlayButton.BackgroundTransparency = 1
    OverlayButton.Text = ""
    OverlayButton.ZIndex = 5000
    
    local PopupFrame = Instance.new("Frame")
    PopupFrame.Name = "ColorPickerPopup"
    PopupFrame.Parent = Overlay
    PopupFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    PopupFrame.Position = UDim2.fromScale(0.5, 0.5)
    PopupFrame.Size = UDim2.new(0, 400, 0, 300)
    PopupFrame.BackgroundColor3 = Color3.fromRGB(20, 22, 26)
    PopupFrame.BorderSizePixel = 0
    PopupFrame.ZIndex = 5001
    
    local PopupCorner = Instance.new("UICorner")
    PopupCorner.Parent = PopupFrame
    PopupCorner.CornerRadius = UDim.new(0, 12)
    
    local PopupStroke = Instance.new("UIStroke")
    PopupStroke.Parent = PopupFrame
    PopupStroke.Color = Color3.fromRGB(40, 42, 46)
    PopupStroke.Thickness = 2
    
    local PopupGradient = Instance.new("UIGradient")
    PopupGradient.Parent = PopupFrame
    PopupGradient.Rotation = 45
    PopupGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 27, 31)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 17, 21))
    })
    
    local PopupPadding = Instance.new("UIPadding")
    PopupPadding.Parent = PopupFrame
    PopupPadding.PaddingTop = UDim.new(0, 20)
    PopupPadding.PaddingBottom = UDim.new(0, 20)
    PopupPadding.PaddingLeft = UDim.new(0, 20)
    PopupPadding.PaddingRight = UDim.new(0, 20)
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 30)
    Title.Parent = PopupFrame
    Title.BackgroundTransparency = 1
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = "Advanced Color Picker"
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Center
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 18
    Title.ZIndex = 5002
    
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Parent = PopupFrame
    CloseButton.BackgroundColor3 = Color3.fromRGB(40, 42, 46)
    CloseButton.Text = "✕"
    CloseButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    CloseButton.TextSize = 16
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.ZIndex = 5002
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.Parent = CloseButton
    CloseCorner.CornerRadius = UDim.new(0, 6)
    
    local H, S, V = RGBtoHSV(startColor)
    
    local PreviewFrame = Instance.new("Frame")
    PreviewFrame.Name = "PreviewFrame"
    PreviewFrame.Position = UDim2.new(0, 0, 0, 40)
    PreviewFrame.Size = UDim2.new(0, 80, 0, 80)
    PreviewFrame.Parent = PopupFrame
    PreviewFrame.BackgroundColor3 = startColor
    PreviewFrame.BorderSizePixel = 0
    PreviewFrame.ZIndex = 5002
    
    local PreviewCorner = Instance.new("UICorner")
    PreviewCorner.Parent = PreviewFrame
    PreviewCorner.CornerRadius = UDim.new(0, 10)
    
    local PreviewStroke = Instance.new("UIStroke")
    PreviewStroke.Parent = PreviewFrame
    PreviewStroke.Color = Color3.fromRGB(60, 62, 66)
    PreviewStroke.Thickness = 2
    
    local CanvasFrame = Instance.new("Frame")
    CanvasFrame.Name = "CanvasFrame"
    CanvasFrame.Position = UDim2.new(0, 100, 0, 40)
    CanvasFrame.Size = UDim2.new(1, -120, 0, 160)
    CanvasFrame.Parent = PopupFrame
    CanvasFrame.BackgroundColor3 = HSVtoRGB(H, 1, 1)
    CanvasFrame.BorderSizePixel = 0
    CanvasFrame.ZIndex = 5002
    
    local CanvasCorner = Instance.new("UICorner")
    CanvasCorner.Parent = CanvasFrame
    CanvasCorner.CornerRadius = UDim.new(0, 8)
    
    local CanvasStroke = Instance.new("UIStroke")
    CanvasStroke.Parent = CanvasFrame
    CanvasStroke.Color = Color3.fromRGB(50, 52, 56)
    CanvasStroke.Thickness = 1
    
    local SaturationOverlay = Instance.new("Frame")
    SaturationOverlay.Name = "SaturationOverlay"
    SaturationOverlay.Size = UDim2.new(1, 0, 1, 0)
    SaturationOverlay.Parent = CanvasFrame
    SaturationOverlay.BackgroundColor3 = Color3.new(1, 1, 1)
    SaturationOverlay.BorderSizePixel = 0
    SaturationOverlay.ZIndex = 5003
    
    local SatCorner = Instance.new("UICorner")
    SatCorner.Parent = SaturationOverlay
    SatCorner.CornerRadius = UDim.new(0, 8)
    
    local SatGradient = Instance.new("UIGradient")
    SatGradient.Parent = SaturationOverlay
    SatGradient.Rotation = 0
    SatGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    
    local ValueOverlay = Instance.new("Frame")
    ValueOverlay.Name = "ValueOverlay"
    ValueOverlay.Size = UDim2.new(1, 0, 1, 0)
    ValueOverlay.Parent = CanvasFrame
    ValueOverlay.BackgroundColor3 = Color3.new(0, 0, 0)
    ValueOverlay.BorderSizePixel = 0
    ValueOverlay.ZIndex = 5004
    
    local ValCorner = Instance.new("UICorner")
    ValCorner.Parent = ValueOverlay
    ValCorner.CornerRadius = UDim.new(0, 8)
    
    local ValGradient = Instance.new("UIGradient")
    ValGradient.Parent = ValueOverlay
    ValGradient.Rotation = 90
    ValGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(1, 0)
    })
    
    local CanvasSelector = Instance.new("Frame")
    CanvasSelector.Name = "CanvasSelector"
    CanvasSelector.Size = UDim2.fromOffset(16, 16)
    CanvasSelector.Parent = CanvasFrame
    CanvasSelector.AnchorPoint = Vector2.new(0.5, 0.5)
    CanvasSelector.BackgroundColor3 = Color3.new(1, 1, 1)
    CanvasSelector.BorderSizePixel = 0
    CanvasSelector.ZIndex = 5005
    
    local SelectorCorner = Instance.new("UICorner")
    SelectorCorner.Parent = CanvasSelector
    SelectorCorner.CornerRadius = UDim.new(1, 0)
    
    local SelectorStroke = Instance.new("UIStroke")
    SelectorStroke.Parent = CanvasSelector
    SelectorStroke.Color = Color3.new(0, 0, 0)
    SelectorStroke.Thickness = 2
    
    local HueBar = Instance.new("Frame")
    HueBar.Name = "HueBar"
    HueBar.Position = UDim2.new(0, 100, 0, 210)
    HueBar.Size = UDim2.new(1, -120, 0, 20)
    HueBar.Parent = PopupFrame
    HueBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    HueBar.BorderSizePixel = 0
    HueBar.ZIndex = 5002
    
    local HueCorner = Instance.new("UICorner")
    HueCorner.Parent = HueBar
    HueCorner.CornerRadius = UDim.new(0, 8)
    
    local HueStroke = Instance.new("UIStroke")
    HueStroke.Parent = HueBar
    HueStroke.Color = Color3.fromRGB(50, 52, 56)
    HueStroke.Thickness = 1
    
    local HueGradient = Instance.new("UIGradient")
    HueGradient.Parent = HueBar
    HueGradient.Rotation = 0
    HueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
    })
    
    local HueSelector = Instance.new("Frame")
    HueSelector.Name = "HueSelector"
    HueSelector.Size = UDim2.fromOffset(14, 26)
    HueSelector.Parent = HueBar
    HueSelector.AnchorPoint = Vector2.new(0.5, 0.5)
    HueSelector.Position = UDim2.new(H, 0, 0.5, 0)
    HueSelector.BackgroundColor3 = Color3.new(1, 1, 1)
    HueSelector.BorderSizePixel = 0
    HueSelector.ZIndex = 5003
    
    local HueSelectorCorner = Instance.new("UICorner")
    HueSelectorCorner.Parent = HueSelector
    HueSelectorCorner.CornerRadius = UDim.new(0, 4)
    
    local HueSelectorStroke = Instance.new("UIStroke")
    HueSelectorStroke.Parent = HueSelector
    HueSelectorStroke.Color = Color3.new(0, 0, 0)
    HueSelectorStroke.Thickness = 2
    
    local HexLabel = Instance.new("TextLabel")
    HexLabel.Name = "HexLabel"
    HexLabel.Position = UDim2.new(0, 0, 0, 130)
    HexLabel.Size = UDim2.new(0, 80, 0, 20)
    HexLabel.Parent = PopupFrame
    HexLabel.BackgroundTransparency = 1
    HexLabel.Font = Enum.Font.Gotham
    HexLabel.Text = "Hex Color:"
    HexLabel.TextXAlignment = Enum.TextXAlignment.Left
    HexLabel.TextYAlignment = Enum.TextYAlignment.Center
    HexLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    HexLabel.TextSize = 14
    HexLabel.ZIndex = 5002
    
    local HexInput = Instance.new("TextBox")
    HexInput.Name = "HexInput"
    HexInput.Position = UDim2.new(0, 0, 0, 155)
    HexInput.Size = UDim2.new(0, 80, 0, 30)
    HexInput.Parent = PopupFrame
    HexInput.BackgroundColor3 = Color3.fromRGB(30, 32, 36)
    HexInput.Text = toHex(startColor)
    HexInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    HexInput.TextSize = 13
    HexInput.Font = Enum.Font.GothamMedium
    HexInput.PlaceholderText = "#FFFFFF"
    HexInput.ClearTextOnFocus = false
    HexInput.ZIndex = 5002
    
    local HexCorner = Instance.new("UICorner")
    HexCorner.Parent = HexInput
    HexCorner.CornerRadius = UDim.new(0, 6)
    
    local HexStroke = Instance.new("UIStroke")
    HexStroke.Parent = HexInput
    HexStroke.Color = Color3.fromRGB(50, 52, 56)
    HexStroke.Thickness = 1
        
    PopupFrame.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(Overlay, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        BackgroundTransparency = 0.4
    }):Play()
    TweenService:Create(PopupFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 400, 0, 300)
    }):Play()
    
    local function updateCanvasSelector()
        CanvasSelector.Position = UDim2.new(S, 0, 1 - V, 0)
    end
    
    local function updateHueSelector()
        HueSelector.Position = UDim2.new(H, 0, 0.5, 0)
    end
    
    local function updateColor()
        local newColor = HSVtoRGB(H, S, V)
        PreviewFrame.BackgroundColor3 = newColor
        CanvasFrame.BackgroundColor3 = HSVtoRGB(H, 1, 1)
        HexInput.Text = toHex(newColor)
        if onColorChanged then onColorChanged(newColor) end
    end
    
    updateCanvasSelector()
    updateHueSelector()
    updateColor()
    
    local canvasDragging = false
    local function updateFromCanvas(input)
        local pos = CanvasFrame.AbsolutePosition
        local size = CanvasFrame.AbsoluteSize
        local relativeX = clamp01((input.Position.X - pos.X) / size.X)
        local relativeY = clamp01((input.Position.Y - pos.Y) / size.Y)
        S = relativeX
        V = 1 - relativeY
        updateCanvasSelector()
        updateColor()
        TweenService:Create(CanvasSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            Size = UDim2.fromOffset(18, 18)
        }):Play()
        wait(0.1)
        TweenService:Create(CanvasSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            Size = UDim2.fromOffset(16, 16)
        }):Play()
    end
    
    CanvasFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            canvasDragging = true
            updateFromCanvas(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if canvasDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateFromCanvas(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            canvasDragging = false
        end
    end)
    
    local hueDragging = false
    local function updateFromHue(input)
        local pos = HueBar.AbsolutePosition
        local size = HueBar.AbsoluteSize
        local relativeX = clamp01((input.Position.X - pos.X) / size.X)
        H = relativeX
        updateHueSelector()
        updateColor()
        TweenService:Create(HueSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            Size = UDim2.fromOffset(16, 28)
        }):Play()
        wait(0.1)
        TweenService:Create(HueSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            Size = UDim2.fromOffset(14, 26)
        }):Play()
    end
    
    HueBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hueDragging = true
            updateFromHue(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if hueDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateFromHue(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hueDragging = false
        end
    end)
    
    HexInput.FocusLost:Connect(function()
        local hexColor = fromHex(HexInput.Text)
        if hexColor then
            H, S, V = RGBtoHSV(hexColor)
            updateCanvasSelector()
            updateHueSelector()
            updateColor()
        else
            HexInput.Text = toHex(HSVtoRGB(H, S, V))
        end
    end)
    
    local function closePopup()
        TweenService:Create(PopupFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
            Size = UDim2.new(0, 0, 0, 0)
        }):Play()
        TweenService:Create(Overlay, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            BackgroundTransparency = 1
        }):Play()
        wait(0.3)
        if Overlay then
            Overlay:Destroy()
        end
    end
    
    ApplyButton.MouseButton1Click:Connect(function()
        closePopup()
        if onClose then onClose(HSVtoRGB(H, S, V)) end
    end)
    
    CancelButton.MouseButton1Click:Connect(function()
        closePopup()
        if onClose then onClose(startColor) end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        closePopup()
        if onClose then onClose(startColor) end
    end)
    
    OverlayButton.MouseButton1Click:Connect(function()
        closePopup()
        if onClose then onClose(startColor) end
    end)
    
    ApplyButton.MouseEnter:Connect(function()
        TweenService:Create(ApplyButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(100, 90, 230),
            Size = UDim2.new(0, 57, 0, 32)
        }):Play()
    end)
    
    ApplyButton.MouseLeave:Connect(function()
        TweenService:Create(ApplyButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(89, 80, 218),
            Size = UDim2.new(0, 55, 0, 30)
        }):Play()
    end)
    
    CancelButton.MouseEnter:Connect(function()
        TweenService:Create(CancelButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(70, 72, 76),
            Size = UDim2.new(0, 57, 0, 32)
        }):Play()
    end)
    
    CancelButton.MouseLeave:Connect(function()
        TweenService:Create(CancelButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(60, 62, 66),
            Size = UDim2.new(0, 55, 0, 30)
        }):Play()
    end)
    
    CloseButton.MouseEnter:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(80, 42, 46),
            TextColor3 = Color3.fromRGB(255, 100, 100)
        }):Play()
    end)
    
    CloseButton.MouseLeave:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = Color3.fromRGB(40, 42, 46),
            TextColor3 = Color3.fromRGB(200, 200, 200)
        }):Play()
    end)
end

local function createColorPickerElement(parent, text, defaultColor, callback)
	if typeof(UIState.colorPickers[text]) ~= "Color3" then
		UIState.colorPickers[text] = defaultColor or Color3.fromRGB(255,255,255)
	end

	local ColorPicker = createInstance("Frame", {
		Name = "ColorPicker_" .. text,
		Size = UDim2.new(0, 200, 0, 25),
		Parent = parent,
		BackgroundTransparency = 1,
		ZIndex = 26
	})

	local TextLabel = createInstance("TextLabel", {
		Name = "TextLabel",
		Size = UDim2.new(0, 140, 1, 0),
		Parent = ColorPicker,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = text,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = Color3.fromRGB(156,156,156),
		TextSize = 12,
		ZIndex = 27
	})

	local ColorFrame = createInstance("Frame", {
		Name = "ColorFrame",
		Position = UDim2.new(1, -25, 0.5, 0),
		Size = UDim2.new(0, 20, 0, 20),
		Parent = ColorPicker,
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundColor3 = Color3.fromRGB(31,33,35),
		BorderSizePixel = 0,
		ClipsDescendants = true,
		ZIndex = 28
	})
	createInstance("UICorner", { Parent = ColorFrame, CornerRadius = UDim.new(0, 6) })

	local Checker = createInstance("ImageLabel", {
		Parent = ColorFrame,
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Image = "rbxassetid://185746271",
		ImageTransparency = 0.2,
		ScaleType = Enum.ScaleType.Tile,
		TileSize = UDim2.new(0, 6, 0, 6),
		ZIndex = 29
	})
	createInstance("UICorner", { Parent = Checker, CornerRadius = UDim.new(0, 6) })

	local ColorFill = createInstance("Frame", {
		Parent = ColorFrame,
		Size = UDim2.fromScale(1, 1),
		BorderSizePixel = 0,
		BackgroundColor3 = UIState.colorPickers[text],
		BackgroundTransparency = 0,
		ZIndex = 30
	})
	createInstance("UICorner", { Parent = ColorFill, CornerRadius = UDim.new(0, 6) })

	createInstance("UIStroke", {
		Parent = ColorFrame,
		Color = Color3.fromRGB(81,73,195),
		Thickness = 1,
		LineJoinMode = Enum.LineJoinMode.Round
	})

	local ColorButton = createInstance("TextButton", {
		Name = "ColorButton",
		Size = UDim2.new(1, 0, 1, 0),
		Parent = ColorFrame,
		BackgroundTransparency = 1,
		Text = "",
		ZIndex = 35
	})

	local function clamp01(x) return math.clamp(x, 0, 1) end

	local function applyColor(c, fire)
		if typeof(c) ~= "Color3" then return end
		UIState.colorPickers[text] = c
		ColorFill.BackgroundColor3 = c
		if fire and callback then callback(c) end
	end

	local function openPopup()
		local root = ScreenGui or player:WaitForChild("PlayerGui")

		local Shield = createInstance("TextButton", {
			Name = "ColorShield",
			Parent = root,
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Text = "",
			AutoButtonColor = false,
			ZIndex = 5000
		})

		local PAD, SV_SIZE, GAP, HUE_H = 12, 160, 10, 12
		local POP_W = PAD * 2 + SV_SIZE
		local POP_H = PAD * 2 + 30 + SV_SIZE + GAP + HUE_H

		local Popup = createInstance("Frame", {
			Name = "AdvancedColorPicker",
			Parent = Shield,
			Size = UDim2.new(0, POP_W, 0, POP_H),
			BackgroundColor3 = Color3.fromRGB(20,22,26),
			BorderSizePixel = 0,
			ZIndex = 5001
		})
		createInstance("UICorner", { Parent = Popup, CornerRadius = UDim.new(0,8) })
		createInstance("UIStroke", { Parent = Popup, Color = Color3.fromRGB(40,42,46), Thickness = 1 })

		local function positionPopup()
			local cam = workspace.CurrentCamera
			local vp  = cam and cam.ViewportSize or Vector2.new(1280,720)
			local p   = ColorFrame.AbsolutePosition
			local sz  = ColorFrame.AbsoluteSize
			local px  = p.X + sz.X + 10
			local py  = p.Y - (POP_H - sz.Y)/2

			if px + POP_W + 10 > vp.X then px = p.X - POP_W - 10 end
			if py + POP_H + 10 > vp.Y then py = vp.Y - POP_H - 10 end
			if py < 10 then py = 10 end

			Popup.Position = UDim2.new(0, px, 0, py)
		end
		positionPopup()

		local TitleBar = createInstance("Frame", {
			Parent = Popup,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 0, 30),
			BackgroundTransparency = 1,
			ZIndex = 5002
		})

		createInstance("TextLabel", {
			Parent = TitleBar,
			Position = UDim2.new(0, PAD, 0, 5),
			Size = UDim2.new(1, -PAD*2 - 24, 0, 20),
			BackgroundTransparency = 1,
			FontFace = Fonts.SemiBold,
			Text = "Color Picker",
			TextXAlignment = Enum.TextXAlignment.Left,
			TextYAlignment = Enum.TextYAlignment.Center,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = 16,
			ZIndex = 5002
		})

		local CloseBtn = createInstance("TextButton", {
			Parent = TitleBar,
			Position = UDim2.new(1, -26, 0, 4),
			Size = UDim2.new(0, 22, 0, 22),
			BackgroundColor3 = Color3.fromRGB(40,42,46),
			Text = "X",
			TextColor3 = Color3.fromRGB(200,200,200),
			TextSize = 12,
			FontFace = Fonts.SemiBold,
			ZIndex = 5003
		})
		createInstance("UICorner", { Parent = CloseBtn, CornerRadius = UDim.new(0,4) })

		local cur = UIState.colorPickers[text]
		local H, S, V = Color3.toHSV(cur)

		local SV = createInstance("Frame", {
			Parent = Popup,
			Position = UDim2.new(0, PAD, 0, PAD + 30),
			Size = UDim2.new(0, SV_SIZE, 0, SV_SIZE),
			BackgroundColor3 = Color3.fromHSV(H, 1, 1),
			BorderSizePixel = 0,
			ZIndex = 5002
		})
		createInstance("UICorner", { Parent = SV, CornerRadius = UDim.new(0, 8) })

		local SatOverlay = createInstance("Frame", {
			Parent = SV, Size = UDim2.fromScale(1, 1),
			BackgroundColor3 = Color3.new(1,1,1), BorderSizePixel = 0, ZIndex = 5003
		})
		createInstance("UICorner", { Parent = SatOverlay, CornerRadius = UDim.new(0,8) })
		createInstance("UIGradient", {
			Parent = SatOverlay, Rotation = 0,
			Transparency = NumberSequence.new({
				NumberSequenceKeypoint.new(0,0),
				NumberSequenceKeypoint.new(1,1)
			})
		})

		local ValOverlay = createInstance("Frame", {
			Parent = SV, Size = UDim2.fromScale(1, 1),
			BackgroundColor3 = Color3.new(0,0,0), BorderSizePixel = 0, ZIndex = 5004
		})
		createInstance("UICorner", { Parent = ValOverlay, CornerRadius = UDim.new(0,8) })
		createInstance("UIGradient", {
			Parent = ValOverlay, Rotation = 90,
			Transparency = NumberSequence.new({
				NumberSequenceKeypoint.new(0,1),
				NumberSequenceKeypoint.new(1,0)
			})
		})

		local SVKnob = createInstance("Frame", {
			Parent = SV, Size = UDim2.fromOffset(12,12),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(S, 0, 1 - V, 0),
			BackgroundTransparency = 1, BorderSizePixel = 0, ZIndex = 5005
		})
		createInstance("UICorner", { Parent = SVKnob, CornerRadius = UDim.new(1, 0) })
		createInstance("UIStroke", { Parent = SVKnob, Thickness = 2, Color = Color3.fromRGB(255,255,255) })

		local HueBar = createInstance("Frame", {
			Parent = Popup,
			Position = UDim2.new(0, PAD, 0, PAD + 30 + SV_SIZE + GAP),
			Size = UDim2.new(0, SV_SIZE, 0, HUE_H),
			BorderSizePixel = 0, ZIndex = 5002
		})
		createInstance("UICorner", { Parent = HueBar, CornerRadius = UDim.new(0,6) })
		createInstance("UIGradient", {
			Parent = HueBar,
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255,0,0)),
				ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255,255,0)),
				ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0,255,0)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0,255,255)),
				ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0,0,255)),
				ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255,0,255)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255,0,0))
			})
		})

		local HueKnob = createInstance("Frame", {
			Parent = HueBar, Size = UDim2.fromOffset(12, 12),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(H, 0, 0.5, 0),
			BackgroundTransparency = 1, BorderSizePixel = 0, ZIndex = 5003
		})
		createInstance("UICorner", { Parent = HueKnob, CornerRadius = UDim.new(1, 0) })
		createInstance("UIStroke", { Parent = HueKnob, Thickness = 2, Color = Color3.fromRGB(255,255,255) })

		local draggingSV, draggingHue = false, false

		local function updateFromSV(input)
			local pos = SV.AbsolutePosition
			local size = SV.AbsoluteSize
			local rx = clamp01((input.Position.X - pos.X) / size.X)
			local ry = clamp01((input.Position.Y - pos.Y) / size.Y)
			S = rx; V = 1 - ry
			SVKnob.Position = UDim2.new(S, 0, 1 - V, 0)
			SV.BackgroundColor3 = Color3.fromHSV(H, 1, 1)
			applyColor(Color3.fromHSV(H, S, V), true)
		end

		local function updateFromHue(input)
			local pos = HueBar.AbsolutePosition
			local size = HueBar.AbsoluteSize
			local rx = clamp01((input.Position.X - pos.X) / size.X)
			H = rx
			HueKnob.Position = UDim2.new(H, 0, 0.5, 0)
			SV.BackgroundColor3 = Color3.fromHSV(H, 1, 1)
			applyColor(Color3.fromHSV(H, S, V), true)
		end

		SV.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				draggingSV = true
				updateFromSV(input)
			end
		end)

		HueBar.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				draggingHue = true
				updateFromHue(input)
			end
		end)

		local uc1, uc2, uc3
		uc1 = UserInputService.InputChanged:Connect(function(input)
			if draggingSV and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				updateFromSV(input)
			elseif draggingHue and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				updateFromHue(input)
			end
		end)
		uc2 = UserInputService.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				draggingSV, draggingHue = false, false
			end
		end)

		local function close()
			if uc1 then uc1:Disconnect() end
			if uc2 then uc2:Disconnect() end
			if uc3 then uc3:Disconnect() end
			if Shield then Shield:Destroy() end
		end

		CloseBtn.MouseButton1Click:Connect(close)

		uc3 = Shield.MouseButton1Click:Connect(function()
			close()
		end)
	end

	ColorButton.MouseButton1Click:Connect(openPopup)

	task.defer(function()
		applyColor(UIState.colorPickers[text], true)
	end)

	UIRegistry.colorPickers[text] = {
		SetColor = function(c, silent)
			applyColor(c, not silent)
		end,
		Get = function()
			return UIState.colorPickers[text]
		end
	}

	return ColorPicker
end

local function createTextBoxElement(parent, text, defaultValue, placeholder, maxLength, callback, opts)
	opts = opts or {}
	UIState.textboxes = UIState.textboxes or {}
	UIState.textboxes[text] = defaultValue or ""

	local RED_TOP     = Color3.fromRGB(239, 68, 68)
	local RED_BOTTOM  = Color3.fromRGB(153, 27, 27)
	local NEUTRAL_BG  = Color3.fromRGB(22, 24, 28)
	local NEUTRAL_BG_HOVER = Color3.fromRGB(26, 28, 32)
	local NEUTRAL_STROKE   = Color3.fromRGB(56, 60, 66)
	local TEXT_MAIN   = Color3.fromRGB(220, 220, 220)
	local TEXT_DIM    = Color3.fromRGB(156, 156, 156)
	local PLACEHOLDER = Color3.fromRGB(120, 120, 120)

	local Row = createInstance("Frame", {
		Name = "TextBox_" .. text,
		Size = UDim2.new(0, 200, 0, 53),
		Parent = parent,
		BackgroundTransparency = 1,
		ZIndex = 20
	})

	local Label = createInstance("TextLabel", {
		Name = "Label",
		Size = UDim2.new(0, 140, 0, 22),
		Parent = Row,
		BackgroundTransparency = 1,
		FontFace = Fonts.Regular,
		Text = text,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = TEXT_DIM,
		TextSize = 13,
		ZIndex = 21
	})

	local BoxFrame = createInstance("Frame", {
		Name = "BoxFrame",
		Position = UDim2.new(0, 0, 0, 25),
		Size = UDim2.new(0, 190, 0, 22),
		Parent = Row,
		BackgroundColor3 = NEUTRAL_BG,
		BorderSizePixel = 0,
		ZIndex = 22
	})
	createInstance("UICorner", { Parent = BoxFrame, CornerRadius = UDim.new(0, 4) })

	local BaseStroke = createInstance("UIStroke", {
		Parent = BoxFrame,
		Color = NEUTRAL_STROKE,
		Thickness = 1,
		Transparency = 0
	})

	local AccentStroke = createInstance("UIStroke", {
		Parent = BoxFrame,
		Color = RED_TOP,
		Thickness = 1.5,
		Transparency = 1,
		LineJoinMode = Enum.LineJoinMode.Round
	})
	createInstance("UIGradient", {
		Parent = AccentStroke,
		Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, RED_TOP),
			ColorSequenceKeypoint.new(1, RED_BOTTOM)
		}),
		Rotation = 90
	})

	local Input = createInstance("TextBox", {
		Name = "Input",
		Parent = BoxFrame,
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(8, 0),
		Size = UDim2.new(1, -16, 1, 0),
		ClearTextOnFocus = opts.ClearOnFocus or false,
		Text = defaultValue or "",
		PlaceholderText = placeholder or "",
		CursorPosition = -1,
		TextEditable = true,
		FontFace = Fonts.Regular,
		TextSize = 13,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		TextColor3 = TEXT_MAIN,
		PlaceholderColor3 = PLACEHOLDER,
		ZIndex = 23
	})

	local focused = false
	local function hover(on)
		if focused then return end
		TweenService:Create(BoxFrame, TweenInfo.new(0.12, Enum.EasingStyle.Quad), {
			BackgroundColor3 = on and NEUTRAL_BG_HOVER or NEUTRAL_BG
		}):Play()
	end

	BoxFrame.MouseEnter:Connect(function() hover(true) end)
	BoxFrame.MouseLeave:Connect(function() hover(false) end)

	Input.Focused:Connect(function()
		focused = true
		TweenService:Create(AccentStroke, TweenInfo.new(0.12, Enum.EasingStyle.Quad), { Transparency = 0 }):Play()
		TweenService:Create(BoxFrame, TweenInfo.new(0.12, Enum.EasingStyle.Quad), {
			BackgroundColor3 = NEUTRAL_BG_HOVER
		}):Play()
		Input.CursorPosition = #Input.Text + 1
		Input.SelectionStart = -1
	end)

	Input.FocusLost:Connect(function(enterPressed)
		focused = false
		TweenService:Create(AccentStroke, TweenInfo.new(0.12, Enum.EasingStyle.Quad), { Transparency = 1 }):Play()
		TweenService:Create(BoxFrame, TweenInfo.new(0.12, Enum.EasingStyle.Quad), {
			BackgroundColor3 = NEUTRAL_BG
		}):Play()

		UIState.textboxes[text] = Input.Text
		if callback then callback(Input.Text, enterPressed) end
	end)

	if opts.NumericOnly then
		Input:GetPropertyChangedSignal("Text"):Connect(function()
			local filtered = Input.Text:gsub("[^%d%-%.]", "")
			if filtered ~= Input.Text then
				local pos = Input.CursorPosition
				Input.Text = filtered
				if pos and pos > 0 then
					Input.CursorPosition = math.clamp(pos - 1, 1, #Input.Text + 1)
				end
			end
		end)
	end

	if maxLength and tonumber(maxLength) then
		Input:GetPropertyChangedSignal("Text"):Connect(function()
			if #Input.Text > maxLength then
				Input.Text = string.sub(Input.Text, 1, maxLength)
				Input.CursorPosition = #Input.Text + 1
			end
		end)
	end

	return Row, Input
end

local function createParagraphElement(parent, title, body, opts)
    opts = opts or {}

    local Paragraph = createInstance("Frame", {
        Name = "Paragraph_" .. title,
        Size = UDim2.new(0, opts.width or 230, 0, 0),
        AutomaticSize = Enum.AutomaticSize.Y,
        Parent = parent,
        BackgroundTransparency = opts.bg and 0 or 1,
        BackgroundColor3 = opts.bg and Color3.fromRGB(20, 20, 22) or Color3.new(1,1,1),
        BorderSizePixel = 0,
        ZIndex = 25
    })

    createInstance("UICorner", { Parent = Paragraph, CornerRadius = UDim.new(0, 6) })
    if opts.bg then
        createInstance("UIStroke", {
            Parent = Paragraph,
            Color = Color3.fromRGB(40, 40, 43),
            Thickness = 1,
            LineJoinMode = Enum.LineJoinMode.Round
        })
    end

    local Header = createInstance("Frame", {
        Parent = Paragraph,
        Size = UDim2.new(1, -10, 0, 25),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        ZIndex = 26
    })

    createInstance("TextLabel", {
        Parent = Header,
        Size = UDim2.new(1, -60, 1, 0),
        BackgroundTransparency = 1,
        FontFace = Fonts.SemiBold,
        Text = title,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextColor3 = Color3.fromRGB(230,230,230),
        TextSize = 15,
        ZIndex = 27
    })

    if opts.sideText then
        local Button = createInstance("TextButton", {
            Parent = Header,
            Position = UDim2.new(1, -50, 0, 0),
            Size = UDim2.new(0, 50, 1, 0),
            BackgroundTransparency = 0.2,
            BackgroundColor3 = Color3.fromRGB(30,30,30),
            Text = opts.sideText,
            FontFace = Fonts.Regular,
            TextSize = 13,
            TextColor3 = Color3.fromRGB(200,200,200),
            ZIndex = 27
        })
        createInstance("UICorner", { Parent = Button, CornerRadius = UDim.new(0, 4) })
        if opts.sideOnClick then
            Button.MouseButton1Click:Connect(opts.sideOnClick)
        end
    end

    local Body = createInstance("TextLabel", {
        Parent = Paragraph,
        Position = UDim2.new(0, 10, 0, 30),
        Size = UDim2.new(1, -20, 0, 0),
        AutomaticSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 1,
        Font = Enum.Font.Gotham,
        Text = body,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        TextWrapped = true,
        RichText = true,
        TextSize = 12,
        TextColor3 = Color3.fromRGB(200,200,200),
        ZIndex = 27
    })

    return Paragraph
end

local function updateTheme()
	local theme = getCurrentTheme()
	
	TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		BackgroundColor3 = theme.Background
	}):Play()
	
	TweenService:Create(Main, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		BackgroundColor3 = theme.Background
	}):Play()
	
	TweenService:Create(MainStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		Color = theme.Stroke
	}):Play()
	
	TweenService:Create(Div, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		BackgroundColor3 = theme.Secondary
	}):Play()
	
	TweenService:Create(Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		TextColor3 = theme.Text
	}):Play()
	
	TweenService:Create(Username, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		TextColor3 = theme.Text
	}):Play()
	
	TweenService:Create(ThemeSelectedLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		TextColor3 = theme.Text
	}):Play()
	
	TweenService:Create(ThemeDropdown, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		BackgroundColor3 = theme.Secondary
	}):Play()
	
	TweenService:Create(ThemeDropdownStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		Color = theme.Stroke
	}):Play()
	
	TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		BackgroundColor3 = theme.Secondary
	}):Play()
	
	TweenService:Create(ThemeOptionsStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
		Color = theme.Stroke
	}):Play()
end

for themeName, _ in pairs(Themes) do
	local ThemeOption = createInstance("TextButton", {
		Name = "ThemeOption_" .. themeName,
		Size = UDim2.new(1, 0, 0, 30),
		Parent = ThemeOptionsFrame,
		BackgroundColor3 = Color3.fromRGB(25, 25, 27),
		BackgroundTransparency = 0.5,
		BorderSizePixel = 0,
		FontFace = Fonts.Regular,
		Text = themeName,
		TextColor3 = Color3.fromRGB(200, 200, 200),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 65
	})

	local ThemeOptionPadding = createInstance("UIPadding", {
		Parent = ThemeOption,
		PaddingLeft = UDim.new(0, 8)
	})

	ThemeOption.MouseButton1Click:Connect(function()
		UIState.currentTheme = themeName
		ThemeSelectedLabel.Text = themeName
		ThemeOptionsFrame.Visible = false
		
		TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			Size = UDim2.new(1, 0, 0, 0)
		}):Play()
		
		TweenService:Create(ThemeDropdownIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			Rotation = 0
		}):Play()
		
		updateTheme()
	end)

	ThemeOption.MouseEnter:Connect(function()
		TweenService:Create(ThemeOption, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			BackgroundTransparency = 0.2
		}):Play()
	end)

	ThemeOption.MouseLeave:Connect(function()
		TweenService:Create(ThemeOption, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
			BackgroundTransparency = 0.5
		}):Play()
	end)
end

local ThemeDropdownButton = createInstance("TextButton", {
	Name = "ThemeDropdownButton",
	Size = UDim2.new(1, 0, 1, 0),
	Parent = ThemeDropdown,
	BackgroundTransparency = 1,
	Text = "",
	ZIndex = 55
})

ThemeDropdownButton.MouseButton1Click:Connect(function()
	local isOpen = ThemeOptionsFrame.Visible
	
	if not isOpen then
		ThemeOptionsFrame.Visible = true
		TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Back), {
			Size = UDim2.new(1, 0, 0, 120)
		}):Play()
	else
		TweenService:Create(ThemeOptionsFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
			Size = UDim2.new(1, 0, 0, 0)
		}):Play()
		task.wait(0.2)
		ThemeOptionsFrame.Visible = false
	end
	
	TweenService:Create(ThemeDropdownIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
		Rotation = isOpen and 0 or 180
	}):Play()
end)

local dragging = false
local dragStart = nil
local startPos = nil

Header.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = Background.Position
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		local delta = input.Position - dragStart
		Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = false
	end
end)

CloseButton.MouseButton1Click:Connect(function()
	UIState.isVisible = false
	TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
		Size = UDim2.new(0, 0, 0, 0)
	}):Play()
	task.wait(0.3)
	Background.Visible = false
end)

CloseButton.MouseEnter:Connect(function()
	TweenService:Create(CloseButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
		BackgroundColor3 = Color3.fromRGB(255, 70, 85)
	}):Play()
end)

CloseButton.MouseLeave:Connect(function()
	TweenService:Create(CloseButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
		BackgroundColor3 = Color3.fromRGB(220, 53, 69)
	}):Play()
end)

local UserInputService = game:GetService("UserInputService")
local TweenService     = game:GetService("TweenService")
local CoreGui          = game:GetService("CoreGui")

UIState.isVisible = (UIState.isVisible == nil) and false or UIState.isVisible

local OPEN_SIZE  = UDim2.new(0, 650, 0, 420)
local CLOSED_SIZE = UDim2.new(0,   0, 0,   0)

local function setUIVisible(show)
	UIState.isVisible = not not show
	if UIState.isVisible then
		Background.Visible = true
		TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
			Size = OPEN_SIZE
		}):Play()
	else
		TweenService:Create(Background, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
			Size = CLOSED_SIZE
		}):Play()
		task.delay(0.3, function()
			if not UIState.isVisible then
				Background.Visible = false
			end
		end)
	end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed and input.KeyCode == Enum.KeyCode.LeftControl then
		setUIVisible(not UIState.isVisible)
	end
end)

do
	local existing = CoreGui:FindFirstChild("SaturnMobileGui")
	if existing then existing:Destroy() end

	local SATURN_ASSET = "rbxassetid://124581386070639"

	local Gui = Instance.new("ScreenGui")
	Gui.Name = "SaturnMobileGui"
	Gui.IgnoreGuiInset = true
	Gui.ResetOnSpawn = false
	Gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	Gui.Parent = CoreGui

	local Button = Instance.new("ImageButton")
	Button.Name = "SaturnButton"
	Button.Size = UDim2.new(0, 56, 0, 56)
	Button.Position = UDim2.new(0.05, 0, 0.82, 0)
	Button.BackgroundColor3 = Color3.fromRGB(20, 20, 22)
	Button.AutoButtonColor = false
	Button.Image = SATURN_ASSET
	Button.ScaleType = Enum.ScaleType.Fit
	Button.ZIndex = 1000
	Button.Parent = Gui

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(1, 0)
	corner.Parent = Button

	local stroke = Instance.new("UIStroke")
	stroke.Thickness = 1
	stroke.Transparency = 0
	stroke.Parent = Button

	local strokeGrad = Instance.new("UIGradient")
	strokeGrad.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(221, 80, 80)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(112, 47, 47)),
	})
	strokeGrad.Parent = stroke

	local Fill = Instance.new("Frame")
	Fill.Name = "Fill"
	Fill.BackgroundTransparency = 0.85
	Fill.BackgroundColor3 = Color3.fromRGB(232, 232, 255)
	Fill.Size = UDim2.new(1, -8, 1, -8)
	Fill.Position = UDim2.new(0, 4, 0, 4)
	Fill.ZIndex = Button.ZIndex - 1
	Fill.Parent = Button

	local FillCorner = Instance.new("UICorner")
	FillCorner.CornerRadius = UDim.new(1, 0)
	FillCorner.Parent = Fill

	local FillGrad = Instance.new("UIGradient")
	FillGrad.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 36, 36)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(181, 79, 79)),
	})
	FillGrad.Parent = Fill

	local function syncButtonVisual()
		if UIState.isVisible then
			TweenService:Create(Button, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				ImageTransparency = 0
			}):Play()
			stroke.Color = Color3.fromRGB(80, 200, 120)
		else
			TweenService:Create(Button, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				ImageTransparency = 0.1
			}):Play()
			stroke.Color = Color3.fromRGB(200, 80, 80)
		end
	end

	Button.MouseButton1Click:Connect(function()
		setUIVisible(not UIState.isVisible)
		TweenService:Create(Button, TweenInfo.new(0.08, Enum.EasingStyle.Quad), { Size = UDim2.new(0, 60, 0, 60) }):Play()
		task.delay(0.08, function()
			TweenService:Create(Button, TweenInfo.new(0.10, Enum.EasingStyle.Quad), { Size = UDim2.new(0, 56, 0, 56) }):Play()
		end)
		syncButtonVisual()
	end)

	local dragging = false
	local dragStart, startPos

	local function updateDrag(input)
		local delta = input.Position - dragStart
		local newPos = UDim2.fromOffset(startPos.X.Offset + delta.X, startPos.Y.Offset + delta.Y)
		Button.Position = UDim2.new(0, math.clamp(newPos.X.Offset, 8, Gui.AbsoluteSize.X - Button.AbsoluteSize.X - 8),
									0, math.clamp(newPos.Y.Offset, 8, Gui.AbsoluteSize.Y - Button.AbsoluteSize.Y - 8))
	end

	Button.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = Button.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			updateDrag(input)
		end
	end)

	if UIState.isVisible then
		Background.Visible = true
		Background.Size = OPEN_SIZE
	else
		Background.Visible = false
		Background.Size = CLOSED_SIZE
	end
	syncButtonVisual()
end

local Window = {}
Window.__index = Window

function Window:new()
	local self = setmetatable({}, Window)
	return self
end

function Window:Tab(options)
	local tabName = options.TabTitle
	local tab = {
		name = tabName,
		container = tabContainers[tabName]
	}
	
	function tab:Toggle(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createToggleElement(section, options.Title, options.Default, options.Callback)
	end
	
	function tab:Slider(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createSliderElement(section, options.Title, options.Default, options.Min, options.Max, options.Suffix, options.Callback)
	end
	
	function tab:Dropdown(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createDropdownElement(section, options.Title, options.Options, options.Default, options.Callback)
	end
	
	function tab:Button(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createButtonElement(section, options.Title, options.Callback)
	end
	
	function tab:ColorPicker(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createColorPickerElement(section, options.Title, options.Default, options.Callback)
	end

	function tab:TextBox(options)
		local side = options.Side or "Left"
		local parent = side == "Left" and self.container.left or self.container.right
		local section = createSection(parent, "")
		return createTextBoxElement(
			section,
			options.Title,
			options.Default,
			options.Placeholder,
			options.MaxLength,
			options.Callback,
			{
				NumericOnly = options.NumericOnly,
				ClearOnFocus = options.ClearOnFocus
			}
		)
	end
	
	task.defer(function()
    local startColor = UIState.colorPickers[text]
    if callback and typeof(startColor) == "Color3" then
			callback(startColor)
		end
	end)

	return tab
end
local SaturnHelper = loadstring(game:HttpGet("https://gist.githubusercontent.com/boogersinmybutt/623b374074a18531e9ceafbf9f53d751/raw/d5ea09d8ef2bad3358e723ae290e625c343963f8/GGGGG.lua"))()
local window = Window:new()

local tab1 = window:Tab({ TabTitle = "Catching" })
local tab2 = window:Tab({ TabTitle = "Physics" })
local tab3 = window:Tab({ TabTitle = "Throwing" })
local tab6 = window:Tab({ TabTitle = "Trolling" })
local tab7 = window:Tab({ TabTitle = "Player" })
local tab8 = window:Tab({ TabTitle = "Settings" })

-- // Saturn V7 \\ --

local player =  game:GetService("Players").LocalPlayer
local mouse = player:GetMouse()

local SaturnHub = {
	["QB Aimbot"] = {
		Enabled = true,
		BeamMode = false,
		FadeMode = false,
		LobMode = false,
		DebugMode = false,
		AntiOOBThreshold = 0,
		AutoAngle = true,
		LeadDistance = 0,
	}
}

local Enabled = SaturnHub["QB Aimbot"].Enabled
local BeamMode = SaturnHub["QB Aimbot"].BeamMode
local FadeMode = SaturnHub["QB Aimbot"].FadeMode
local LobMode = SaturnHub["QB Aimbot"].LobMode
local DebugMode = SaturnHub["QB Aimbot"].DebugMode
local AntiOOBThreshold = SaturnHub["QB Aimbot"].AntiOOBThreshold
local AutoAngle = SaturnHub["QB Aimbot"].AutoAngle
local LeadDistance = SaturnHub["QB Aimbot"].LeadDistance

local camera = workspace.CurrentCamera

local locked = false
local target = nil

local ThrowType = "Bullet"

local data = {
Angle = 45,
Direction = Vector3.new(0, 0, 0),
Power = 0
}

local sidewayRoutes = {"flat", "in/out", "stationary", "curl/comeback"}
local diagonalRoutes = {"slant", "post/corner"}
local offsets = {
	["Dot"] = {
		xLead = function(distance)
			local lead = 3 + (math.max(distance - 25, 0) / 50)
			local distanceFactor = math.log(distance + 1) / 2
			lead = lead * distanceFactor
			return lead
		end,
		routes = {
			["go"] = { xzOffset = 0, yOffset = 0 },
			["post/corner"] = { xzOffset = 2, yOffset = 4 },
			["slant"] = { xzOffset = 0, yOffset = 0 },
			["in/out"] = { xzOffset = 0, yOffset = 0 },
			["flat"] = { xzOffset = -2.3, yOffset = 0 },
			["curl/comeback"] = { xzOffset = -6, yOffset = 0 },
			["stationary"] = { xzOffset = 0, yOffset = 0 }
		}
	},
	["Jump"] = {
		xLead = function(distance, route)
			local lead = 16.75 + (distance / 55)
	
			local targetVelocity = target.HumanoidRootPart.Velocity
			local velocityMagnitude = targetVelocity.Magnitude
			local velocityFactor = math.min(velocityMagnitude / 100, 1)
			lead = lead * (1 - velocityFactor * 0.2)
			local angle = data.Angle
			local angleAdjust = math.sin(distance / 100) * 2
			lead = lead + angleAdjust
	
			local angleDistanceAdd = (distance / 100) ^ 1.8
			if angle > 30 then
				local percentage = (angle - 60) / 20
				angleDistanceAdd = distance / (65 - (percentage * 5))
			end
			lead = lead + angleDistanceAdd
			lead = lead + math.max(angle - 45, -5) / 5
	
			if angle < 40 then
				lead = lead * (1 - ((45 - angle) / 100))
			end
	
			if SaturnHub["QB Aimbot"].BeamMode and table.find(diagonalRoutes, route) and distance > 175 then
				lead = lead + 4
			end
	
			if table.find(diagonalRoutes, route) then
				lead = lead + (1 + (distance / 38))
			end
	
			local routeOffsets = {
				["go"] = { xzOffset = 0, yOffset = 0 },
				["post/corner"] = { xzOffset = -1, yOffset = 0 },
				["slant"] = { xzOffset = -1, yOffset = 0 },
				["in/out"] = { xzOffset = 0, yOffset = 0 },
				["flat"] = { xzOffset = 0, yOffset = 0 },
				["curl/comeback"] = { xzOffset = -12.5, yOffset = 0 },
				["stationary"] = { xzOffset = 0, yOffset = 0 }
			}
	
			local currentRoute = routeOffsets[route]
			local transitionFactor = 0.1
			if lastRoute then
				xOffset = xOffset + (currentRoute.xzOffset - xOffset) * transitionFactor
				yOffset = yOffset + (currentRoute.yOffset - yOffset) * transitionFactor
			else
				xOffset = currentRoute.xzOffset
				yOffset = currentRoute.yOffset
			end
			lastRoute = route
	
			local velocityDirection = targetVelocity.X
			if velocityDirection > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			elseif velocityDirection < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			else
				currentRoute.xzOffset = currentRoute.xzOffset * 1
			end
	
			local verticalVelocity = targetVelocity.Y
			if verticalVelocity > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.75
			elseif verticalVelocity < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 1.25
			end
	
			local angleFactor = math.abs(targetVelocity.X) > 0 and math.abs(targetVelocity.X) / 20 or 1
			lead = lead * (1 - angleFactor * 0.15)
	
			return lead
		end,
			routes = {
			["go"] = { xzOffset = 1.4, yOffset = 0 },
			["post/corner"] = { xzOffset = -1, yOffset = 0 },
			["slant"] = { xzOffset = -1, yOffset = 0 },
			["in/out"] = { xzOffset = 0, yOffset = 0 },
			["flat"] = { xzOffset = 0, yOffset = 0 },
			["curl/comeback"] = { xzOffset = -12.5, yOffset = 0 },
			["stationary"] = { xzOffset = 0, yOffset = 0 }
		}
	},		
	["Bullet"] = {
		xLead = function(distance)
			local lead = 0
			local angle = data.Angle
			local angleDistanceAdd = (distance / 100) ^ 1.4
			if angle > 45 then
				local percentage = (angle - 50) / 20
				angleDistanceAdd = distance / (75 - (percentage * 5))
			end
			lead = lead + angleDistanceAdd
			lead = lead + (1 + math.sin(distance / 100))
			return lead
		end,
		routes = {
			["go"] = { xzOffset = 0, yOffset = 0 },
			["post/corner"] = { xzOffset = 0, yOffset = 0 },
			["slant"] = { xzOffset = -0.6, yOffset = 0 },
			["in/out"] = { xzOffset = 0, yOffset = 0 },
			["flat"] = { xzOffset = -2.3, yOffset = 0 },
			["curl/comeback"] = { xzOffset = -6, yOffset = 0 },
			["stationary"] = { xzOffset = 0, yOffset = 0 }
		}
	},
	["Mag"] = {
		xLead = function(distance, route)
			local lead = 21.25
			local angle = data.Angle
			local angleDistanceAdd = (distance / 100) ^ 1.8
	
			local targetVelocity = target.HumanoidRootPart.Velocity
			local velocityMagnitude = targetVelocity.Magnitude
			local velocityFactor = math.min(velocityMagnitude / 100, 1)
	
			lead = lead * (1 - velocityFactor * 0.2)
	
			if angle > 30 then
				local percentage = (angle - 60) / 20
				angleDistanceAdd = distance / (65 - (percentage * 5))
			end
	
			if SaturnHub["QB Aimbot"].BeamMode and table.find(diagonalRoutes, route) and distance > 200 then
				lead = lead + 0.12
			end
	
			if table.find(diagonalRoutes, route) then
				lead = lead + (1 + (distance / 38))
			end
	
			lead = lead + angleDistanceAdd
			lead = lead + math.max(angle - 45, -5) / 5
	
			if angle < 40 then
				lead = lead * (1 - ((45 - angle) / 100))
			end
	
			local routeOffsets = {
				["go"] = { xzOffset = 9, yOffset = 0 },
				["post/corner"] = { xzOffset = 2, yOffset = 0 },
				["slant"] = { xzOffset = 2, yOffset = 0 },
				["in/out"] = { xzOffset = 0.2, yOffset = 0 },
				["flat"] = { xzOffset = 0.2, yOffset = 0 },
				["curl/comeback"] = { xzOffset = -6, yOffset = 0 },
				["stationary"] = { xzOffset = 0.2, yOffset = 0 }
			}
	
			local currentRoute = routeOffsets[route]
			local transitionFactor = 0.1
			if lastRoute then
				xOffset = xOffset + (currentRoute.xzOffset - xOffset) * transitionFactor
				yOffset = yOffset + (currentRoute.yOffset - yOffset) * transitionFactor
			else
				xOffset = currentRoute.xzOffset
				yOffset = currentRoute.yOffset
			end
	
			lastRoute = route
	
			local velocityDirection = targetVelocity.X
			if velocityDirection > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			elseif velocityDirection < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			else
				currentRoute.xzOffset = currentRoute.xzOffset * 1
			end
	
			local verticalVelocity = targetVelocity.Y
			if verticalVelocity > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.75
			elseif verticalVelocity < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 1.25
			end
	
			local angleFactor = math.abs(targetVelocity.X) > 0 and math.abs(targetVelocity.X) / 20 or 1
			lead = lead * (1 - angleFactor * 0.15)
	
			return lead
		end,
		routes = {
			["go"] = { xzOffset = 9, yOffset = 0 },
			["post/corner"] = { xzOffset = 2, yOffset = 0 },
			["slant"] = { xzOffset = 2, yOffset = 0 },
			["in/out"] = { xzOffset = 0.2, yOffset = 0 },
			["flat"] = { xzOffset = 0.2, yOffset = 0 },
			["curl/comeback"] = { xzOffset = -6, yOffset = 0 },
			["stationary"] = { xzOffset = 0.2, yOffset = 0 }
		}
	},		
	["Dime"] = {
		xLead = function(distance, route)
			local lead = 18.2
			local angle = data.Angle
			local angleDistanceAdd = (distance / 100) ^ 3
	
			local targetVelocity = target.HumanoidRootPart.Velocity
			local velocityMagnitude = targetVelocity.Magnitude
	
			local velocityFactor = math.min(velocityMagnitude / 100, 1)
	
			lead = lead * (1 - velocityFactor * 0.2)
	
			if angle > 30 then
				local percentage = (angle - 50) / 20
				angleDistanceAdd = distance / (50 - (percentage * 5))
			end
	
			if SaturnHub["QB Aimbot"].BeamMode and table.find(diagonalRoutes, route) and distance > 150 then
				lead = lead - 1.15
			end
	
			if table.find(diagonalRoutes, route) then
				lead = lead + (1 + (distance / 38))
			end
	
			lead = lead + angleDistanceAdd
			lead = lead + math.max(angle - 45, -5) / 5
	
			if angle < 40 then
				lead = lead * (1 - ((45 - angle) / 100))
			end
	
			local routeOffsets = {
				["go"] = { xzOffset = 7, yOffset = 0 },
				["post/corner"] = { xzOffset = -0.4, yOffset = 0 },
				["slant"] = { xzOffset = -2, yOffset = 0 },
				["in/out"] = { xzOffset = 0, yOffset = -0.2 },
				["flat"] = { xzOffset = -1, yOffset = -0.8 },
				["curl/comeback"] = { xzOffset = -1.5, yOffset = -2 },
				["stationary"] = { xzOffset = 0, yOffset = -2 }
			}
	
			local currentRoute = routeOffsets[route]
	
			local transitionFactor = 0.1 
			if lastRoute then
				xOffset = xOffset + (currentRoute.xzOffset - xOffset) * transitionFactor
				yOffset = yOffset + (currentRoute.yOffset - yOffset) * transitionFactor
			else
				xOffset = currentRoute.xzOffset
				yOffset = currentRoute.yOffset
			end
	
			lastRoute = route
	
			local velocityDirection = targetVelocity.X
			if velocityDirection > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			elseif velocityDirection < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.3
			else
				currentRoute.xzOffset = currentRoute.xzOffset * 1
			end
	
			local verticalVelocity = targetVelocity.Y
			if verticalVelocity > 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 0.75
			elseif verticalVelocity < 0 then
				currentRoute.xzOffset = currentRoute.xzOffset * 1.25
			end
	
			local angleFactor = math.abs(targetVelocity.X) > 0 and math.abs(targetVelocity.X) / 20 or 1
			lead = lead * (1 - angleFactor * 0.15)
			return lead
		end,
		routes = {
			["go"] = { xzOffset = 7, yOffset = 0 },
			["post/corner"] = { xzOffset = -0.4, yOffset = 0 },
			["slant"] = { xzOffset = -2, yOffset = 0 },
			["in/out"] = { xzOffset = 0, yOffset = -0.2 },
			["flat"] = { xzOffset = -1, yOffset = -0.8 },
			["curl/comeback"] = { xzOffset = -1.5, yOffset = -2 },
			["stationary"] = { xzOffset = 0, yOffset = -2 }
		}
	}
	
}

local ThrowTypesSwitch = {
	["Dime"] = "Bullet",
	["Bullet"] = "Jump",
	["Jump"] = "Dime",
}



local isPractice = game.PlaceId == 8206123457

local EnderPart = Instance.new("Part")
EnderPart.CanCollide = false
EnderPart.Anchored = true
EnderPart.Transparency = 1
EnderPart.Position = isPractice and Vector3.new(245, 40.55, 0) or Vector3.new(0, 40.55, 0)
EnderPart.Size = Vector3.new(161, 75, 360)
EnderPart.Parent = workspace

function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        if typeof(k) ~= 'string' then
            continue
        end
        instance[k] = v
    end
    return instance
end

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local uis = UserInputService
local camera = workspace.CurrentCamera

local Char = Player.Character or Player.CharacterAdded:Wait()
Player.CharacterAdded:Connect(function(character) Char = character end)

local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local mobileButtons = isMobile

local Cards = CoreGui:FindFirstChild("Cards")
if not Cards then
    Cards = Instance.new("ScreenGui")
    Cards.Name = "Cards"
    Cards.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
end

local QB = CoreGui:FindFirstChild("QB") 
if not QB then
    QB = Instance.new("ScreenGui", CoreGui)
    QB.Name = "QB"
    QB.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
end

    local Frame = createInstance("Frame", {
        Name = "Frame",
        Position = UDim2.new(0.890, 0.000, 0.301, 0.000),
        Size = UDim2.new(0.000, 100.000, 0.000, 244.000),
        Parent = Cards,
        BackgroundTransparency = 1,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        ZIndex = 1
    })
        
    local LockMobile = createInstance("TextButton", {
        Name = "LockMobile",
        Position = UDim2.new(0.180, 0.000, 0.287, 0.000),
        Size = UDim2.new(0.000, 80.000, 0.000, 33.000),
        Parent = Frame,
        Font = Enum.Font.SourceSans,
        Text = 'Button',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_3 = createInstance("UICorner", {
        Parent = LockMobile
    })
    
    local UIGradient_4 = createInstance("UIGradient", {
        Parent = LockMobile,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Val_5 = createInstance("TextLabel", {
        Name = "Val_5",
        Position = UDim2.new(0.086, 0.000, 0.196, 0.000),
        Size = UDim2.new(0.807, 0.000, 0.606, 0.000),
        Parent = LockMobile,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = 'Lock',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_6 = createInstance("UIStroke", {
        Parent = Val_5,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UIAspectRatioConstraint_7 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 3.231,
        Parent = Val_5
    })
    
    local UITextSizeConstraint_8 = createInstance("UITextSizeConstraint", {
        Parent = Val_5,
        MaxTextSize = 18,
        MinTextSize = 1
    })
    
    local UIAspectRatioConstraint_9 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 2.424,
        Parent = LockMobile
    })
    
    local UITextSizeConstraint_10 = createInstance("UITextSizeConstraint", {
        Parent = LockMobile,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local UpAngleMob = createInstance("TextButton", {
        Name = "UpAngleMob",
        Position = UDim2.new(0.180, 0.000, 0.574, 0.000),
        Size = UDim2.new(0.000, 38.000, 0.000, 24.000),
        Parent = Frame,
        Font = Enum.Font.SourceSans,
        Text = '',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_11 = createInstance("UICorner", {
        Parent = UpAngleMob
    })
    
    local UIGradient_12 = createInstance("UIGradient", {
        Parent = UpAngleMob,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Val_13 = createInstance("TextLabel", {
        Name = "Val_13",
        Position = UDim2.new(0.086, 0.000, 0.196, 0.000),
        Size = UDim2.new(0.807, 0.000, 0.606, 0.000),
        Parent = UpAngleMob,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = '+',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_14 = createInstance("UIStroke", {
        Parent = Val_13,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UIAspectRatioConstraint_15 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 2.110,
        Parent = Val_13
    })
    
    local UITextSizeConstraint_16 = createInstance("UITextSizeConstraint", {
        Parent = Val_13,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local UIAspectRatioConstraint_17 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 1.583,
        Parent = UpAngleMob
    })
    
    local UITextSizeConstraint_18 = createInstance("UITextSizeConstraint", {
        Parent = UpAngleMob,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local DownAngleMob = createInstance("TextButton", {
        Name = "DownAngleMob",
        Position = UDim2.new(0.600, 0.000, 0.574, 0.000),
        Size = UDim2.new(0.000, 38.000, 0.000, 24.000),
        Parent = Frame,
        Font = Enum.Font.SourceSans,
        Text = '',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_19 = createInstance("UICorner", {
        Parent = DownAngleMob
    })
    
    local UIGradient_20 = createInstance("UIGradient", {
        Parent = DownAngleMob,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Val_21 = createInstance("TextLabel", {
        Name = "Val_21",
        Position = UDim2.new(0.086, 0.000, -0.012, 0.000),
        Size = UDim2.new(0.807, 0.000, 1.012, 0.000),
        Parent = DownAngleMob,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = '-',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_22 = createInstance("UIStroke", {
        Parent = Val_21,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UIAspectRatioConstraint_23 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 1.262,
        Parent = Val_21
    })
    
    local UITextSizeConstraint_24 = createInstance("UITextSizeConstraint", {
        Parent = Val_21,
        MaxTextSize = 24,
        MinTextSize = 1
    })
    
    local UIAspectRatioConstraint_25 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 1.583,
        Parent = DownAngleMob
    })
    
    local UITextSizeConstraint_26 = createInstance("UITextSizeConstraint", {
        Parent = DownAngleMob,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local ChangeModeMob = createInstance("TextButton", {
        Name = "ChangeModeMob",
        Position = UDim2.new(0.180, 0.000, 0.447, 0.000),
        Size = UDim2.new(0.000, 80.000, 0.000, 25.000),
        Parent = Frame,
        Font = Enum.Font.SourceSans,
        Text = '',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_27 = createInstance("UICorner", {
        Parent = ChangeModeMob
    })
    
    local UIGradient_28 = createInstance("UIGradient", {
        Parent = ChangeModeMob,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Val_29 = createInstance("TextLabel", {
        Name = "Val_29",
        Position = UDim2.new(0.086, 0.000, 0.000, 0.000),
        Size = UDim2.new(0.863, 0.000, 1.000, 0.000),
        Parent = ChangeModeMob,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = 'Change Mode',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_30 = createInstance("UIStroke", {
        Parent = Val_29,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UIAspectRatioConstraint_31 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 2.762,
        Parent = Val_29
    })
    
    local UITextSizeConstraint_32 = createInstance("UITextSizeConstraint", {
        Parent = Val_29,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local UIAspectRatioConstraint_33 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 3.200,
        Parent = ChangeModeMob
    })
    
    local UITextSizeConstraint_34 = createInstance("UITextSizeConstraint", {
        Parent = ChangeModeMob,
        MaxTextSize = 14,
        MinTextSize = 1
    })
    
    local UIAspectRatioConstraint_35 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 0.410,
        Parent = Frame
    })
    
    local UIAspectRatioConstraint_36 = createInstance("UIAspectRatioConstraint", {
        AspectRatio = 1.713,
        Parent = Cards
    })
 
    local Frame = createInstance("Frame", {
        Name = "Frame",
        Position = UDim2.new(0.942, 0.000, 0.184, 0.000),
        Size = UDim2.new(0.884, 0.000, 0.112, 0.000),
        Parent = QB,
        BackgroundTransparency = 1,
        AnchorPoint = Vector2.new(1, 1),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Power = createInstance("Frame", {
        Name = "Power",
        Position = UDim2.new(0.553, 0.000, -0.000, 0.000),
        Size = UDim2.new(0.000, 75.000, 0.000, 75.000),
        Parent = Frame,
        BackgroundTransparency = 0.10000000149011612,
        BackgroundColor3 = Color3.fromRGB(175, 175, 175),
        LayoutOrder = 3,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Val = createInstance("TextLabel", {
        Name = "Val",
        Position = UDim2.new(0.008, 0.000, 0.230, 0.000),
        Size = UDim2.new(0.992, 0.000, 0.455, 0.000),
        Parent = Power,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = '95',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke = createInstance("UIStroke", {
        Parent = Val,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local Title = createInstance("TextLabel", {
        Name = "Title",
        Position = UDim2.new(-0.001, 0.000, 0.699, 0.000),
        Size = UDim2.new(0.992, 0.000, 0.228, 0.000),
        Parent = Power,
        BackgroundTransparency = 1,
        Font = Enum.Font.Unknown,
        Text = 'Power',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        RichText = true,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_1 = createInstance("UIStroke", {
        Parent = Title,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UICorner = createInstance("UICorner", {
        Parent = Power
    })
    
    local UIGradient = createInstance("UIGradient", {
        Parent = Power,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Target = createInstance("Frame", {
        Name = "Target",
        Position = UDim2.new(0.642, 0.000, -0.000, 0.000),
        Size = UDim2.new(0.000, 75.000, 0.000, 75.000),
        Parent = Frame,
        BackgroundTransparency = 0.07000000029802322,
        ClipsDescendants = true,
        BackgroundColor3 = Color3.fromRGB(175, 175, 175),
        LayoutOrder = 5,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Val_2 = createInstance("TextLabel", {
        Name = "Val_2",
        Position = UDim2.new(0.100, 0.000, 0.219, 0.000),
        Size = UDim2.new(0.807, 0.000, 0.455, 0.000),
        Parent = Target,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = 'player',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Title_3 = createInstance("TextLabel", {
        Name = "Title_3",
        Position = UDim2.new(0.008, 0.000, 0.699, 0.000),
        Size = UDim2.new(0.992, 0.000, 0.228, 0.000),
        Parent = Target,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSansBold,
        Text = 'Target',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        RichText = true,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(121, 110, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_4 = createInstance("UICorner", {
        Parent = Target
    })
    
    local UIGradient_5 = createInstance("UIGradient", {
        Parent = Target,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local ThrowType = createInstance("Frame", {
        Name = "ThrowType",
        Position = UDim2.new(0.465, 0.000, -0.000, 0.000),
        Size = UDim2.new(0.000, 75.000, 0.000, 75.000),
        Parent = Frame,
        BackgroundTransparency = 0.07000000029802322,
        BackgroundColor3 = Color3.fromRGB(175, 175, 175),
        LayoutOrder = 2,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Control = createInstance("TextLabel", {
        Name = "Control",
        Position = UDim2.new(0.776, 0.000, 0.049, 0.000),
        Size = UDim2.new(0.215, 0.000, 0.261, 0.000),
        Parent = ThrowType,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = 'Z',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(148, 120, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Title_6 = createInstance("TextLabel", {
        Name = "Title_6",
        Position = UDim2.new(0.008, 0.000, 0.699, 0.000),
        Size = UDim2.new(0.992, 0.000, 0.228, 0.000),
        Parent = ThrowType,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSansBold,
        Text = 'Mode',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        RichText = true,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_7 = createInstance("UIStroke", {
        Parent = Title_6,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local Val_8 = createInstance("TextLabel", {
        Name = "Val_8",
        Position = UDim2.new(-0.020, 0.000, 0.184, 0.000),
        Size = UDim2.new(1.020, 0.000, 0.455, 0.000),
        Parent = ThrowType,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = 'Dime',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_9 = createInstance("UIStroke", {
        Parent = Val_8,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UICorner_10 = createInstance("UICorner", {
        Parent = ThrowType
    })
    
    local UIGradient_11 = createInstance("UIGradient", {
        Parent = ThrowType,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Angle = createInstance("Frame", {
        Name = "Angle",
        Position = UDim2.new(0.376, 0.000, -0.000, 0.000),
        Size = UDim2.new(0.000, 75.000, 0.000, 75.000),
        Parent = Frame,
        BackgroundTransparency = 0.10000000149011612,
        BackgroundColor3 = Color3.fromRGB(175, 175, 175),
        LayoutOrder = 1,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Val_12 = createInstance("TextLabel", {
        Name = "Val_12",
        Position = UDim2.new(-0.020, 0.000, 0.184, 0.000),
        Size = UDim2.new(1.020, 0.000, 0.455, 0.000),
        Parent = Angle,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = '45',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UpControl = createInstance("TextLabel", {
        Name = "UpControl",
        Position = UDim2.new(0.687, 0.000, 0.049, 0.000),
        Size = UDim2.new(0.000, 20.000, 0.000, 20.000),
        Parent = Angle,
        BackgroundTransparency = 1,
        Visible = true,
        Font = Enum.Font.SourceSans,
        Text = 'R',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(148, 120, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Title_13 = createInstance("TextLabel", {
        Name = "Title_13",
        Position = UDim2.new(0.000, 0.000, 0.699, 0.000),
        Size = UDim2.new(1.000, 0.000, 0.228, 0.000),
        Parent = Angle,
        BackgroundTransparency = 1,
        Font = Enum.Font.Unknown,
        Text = 'Angle',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local DownControl = createInstance("TextLabel", {
        Name = "DownControl",
        Position = UDim2.new(0.000, 0.000, 0.049, 0.000),
        Size = UDim2.new(0.000, 20.000, 0.000, 20.000),
        Parent = Angle,
        BackgroundTransparency = 1,
        Visible = true,
        Font = Enum.Font.SourceSans,
        Text = 'F',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(148, 120, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UICorner_14 = createInstance("UICorner", {
        Parent = Angle
    })
    
    local UIGradient_15 = createInstance("UIGradient", {
        Parent = Angle,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local Airtime = createInstance("Frame", {
        Name = "Airtime",
        Position = UDim2.new(0.288, 0.000, -0.000, 0.000),
        Size = UDim2.new(0.000, 75.000, 0.000, 75.000),
        Parent = Frame,
        BackgroundTransparency = 0.14499999582767487,
        ClipsDescendants = true,
        BackgroundColor3 = Color3.fromRGB(175, 175, 175),
        LayoutOrder = 4,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local Val_16 = createInstance("TextLabel", {
        Name = "Val_16",
        Position = UDim2.new(0.086, 0.000, 0.206, 0.000),
        Size = UDim2.new(0.807, 0.000, 0.455, 0.000),
        Parent = Airtime,
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        Text = '1.52s',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_17 = createInstance("UIStroke", {
        Parent = Val_16,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local Title_18 = createInstance("TextLabel", {
        Name = "Title_18",
        Position = UDim2.new(-0.007, 0.000, 0.699, 0.000),
        Size = UDim2.new(0.992, 0.000, 0.228, 0.000),
        Parent = Airtime,
        BackgroundTransparency = 1,
        Font = Enum.Font.Unknown,
        Text = 'Airtime',
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        TextWrapped = true,
        TextColor3 = Color3.fromRGB(118, 129, 202),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BorderSizePixel = 0,
        ZIndex = 1
    })
    
    local UIStroke_19 = createInstance("UIStroke", {
        Parent = Title_18,
        Color = Color3.fromRGB(162, 190, 255),
        Thickness = 0.20000000298023224,
        LineJoinMode = Enum.LineJoinMode.Round,
        Transparency = 0
    })
    
    local UIGradient_20 = createInstance("UIGradient", {
        Parent = Airtime,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(72, 84, 98)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 49, 59)),
        }),
        Transparency = NumberSequence.new(0, 0, 0, 1, 0, 0)
    })
    
    local UICorner_21 = createInstance("UICorner", {
        Parent = Airtime
    })
    
    local UIListLayout = createInstance("UIListLayout", {
        Parent = Frame,
        Padding = UDim.new(0, 15),
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        VerticalAlignment = Enum.VerticalAlignment.Top,
        SortOrder = Enum.SortOrder.Name
    })    

function roundMoveDirection(direction)
	return Vector3.new(math.round(direction.X), math.round(direction.Y), math.round(direction.Z))
end

function Time(from, to, height)
	local g = Vector3.new(0, -28, 0)
	local conversionFactor = 4
	local xMeters = height * conversionFactor

	local a = 0.5 * g.Y
	local b = to.Y - from.Y
	local c = xMeters - from.Y

	local discriminant = (b * b) - (4 * a * c)

	if discriminant < 0 then
		return nil
	end

	local sqrtDiscriminant = math.sqrt(discriminant)
	local t1 = (-b + sqrtDiscriminant) / (2 * a)
	local t2 = (-b - sqrtDiscriminant) / (2 * a)

	local time = math.max(t1, t2)

	if time <= 0 then
		return nil
	end

	return time
end


function Velocity(from, to, time, beamMode, angleMode)
	if time <= 0 then
		return Vector3.zero
	end

	local g = Vector3.new(0, -28, 0)
	local displacement = to - from
	local v0 = (displacement - 0.5 * g * time * time) / time

	local dir = v0.Unit
	local power = v0.Y / dir.Y

	local innerVelocityFactor = 0.5
	local outerVelocityFactor = 0.8

	local innerVelocity = dir * innerVelocityFactor
	local outerVelocity = displacement.Unit * outerVelocityFactor

	local adjustedVelocity = v0 + innerVelocity + outerVelocity

	if beamMode then
		adjustedVelocity = dir * power * time
	elseif angleMode then
		local suggestedAngle = math.atan2(displacement.Y, displacement.Magnitude)
		local angleAdjustment = Vector3.new(0, math.sin(suggestedAngle) * time, 0)
		adjustedVelocity = adjustedVelocity + angleAdjustment
	end

	return adjustedVelocity, dir, math.clamp(math.round(power), 0, 95)
end


function AngleStat(from, to, angle, yLead, beamMode, angleMode, throwType)
	if not from or not to then
		return Vector3.zero, 95
	end

	local distance = (from - to).Magnitude
	
	local yMult
	yMult = angle / 90 / ((angle > 70 and 0.55 - ((angle - 60) / 30) * 0.45) or (angle > 60 and 0.8 - ((angle - 60) / 30) * 0.45) or (angle > 53 and 1) or (angle > 43 and 1.2) or (angle > 30 and 1.5) or 1.9)

	local height = yMult * distance
	local time = Time(from, to, height + yLead)

	if not time then
		return Vector3.zero, 95
	end

	local maxTime = distance / 95
	time = math.max(time, maxTime)

	local vel, dir, power = Velocity(from, to, time, beamMode, angleMode)

	local randomAdjustment = math.random(0, 0)
	local smoothFactor = math.sin(time) * randomAdjustment
	local finalVelocity = vel + Vector3.new(smoothFactor, smoothFactor, smoothFactor)

	if throwType == "Jump" then
		local yHeight = 5 - (distance / 100) * 2
		yHeight = math.max(1, yHeight)
		finalVelocity = Vector3.new(finalVelocity.X, yHeight, finalVelocity.Z)
	elseif throwType == "Bullet" then
		finalVelocity = Vector3.new(finalVelocity.X, 0, finalVelocity.Z)
	elseif throwType == "Dime" then
		finalVelocity = Vector3.new(finalVelocity.X, 0, finalVelocity.Z)
	elseif throwType == "Mag" then
		finalVelocity = Vector3.new(finalVelocity.X, 0, finalVelocity.Z)
	end

	return finalVelocity, time
end




local function CharacterVelocity(from, character, angle, xLead, yLead, offset, route)
	if not character or not character:FindFirstChild("HumanoidRootPart") then
		return Vector3.zero, 0
	end

	offset = offset or Vector3.zero
	local hrp = character.HumanoidRootPart
	local distance = (from - hrp.Position).Magnitude

	local isPlayer = game:GetService("Players"):GetPlayerFromCharacter(character)

	local height = math.sin(math.rad(angle)) * distance * 0.4

	local maxTime = distance / 95
	local time = math.max(Time(from, hrp.Position, height + xLead), maxTime)

	local velocity = hrp.Velocity
	if character:FindFirstChild("Humanoid") and isPlayer then
		velocity = Vector3.new(velocity.X, 0, velocity.Z)
	end

	local predictedPosition = hrp.Position + velocity * time + offset

	local additionalOffset = Vector3.zero
	if route == "side" then
		additionalOffset = Vector3.new(xLead, 0, 0)
	elseif route == "diagonal" then
		additionalOffset = Vector3.new(xLead, 0, xLead)
	end

	predictedPosition = predictedPosition + additionalOffset

	local angleAdjustment = math.sin(distance / 100) * 1.5
	local adjustedAngle = angle + angleAdjustment

	local vel, timePredicted = AngleStat(from, predictedPosition, adjustedAngle, yLead)
	return vel, timePredicted, predictedPosition, adjustedAngle
end





function beamProjectile(g, v0, x0, t1)
	local c = 0.125
	local p3 = 0.5 * g * t1^2 + v0 * t1 + x0
	local p2 = p3 - (g * t1^2 + v0 * t1) / 3
	local p1 = (c * g * t1^2 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2

	local curve0, curve1 = (p1 - x0).Magnitude, (p2 - p3).Magnitude
	local b = (x0 - p3).Unit
	local r1, r2 = (p1 - x0).Unit, (p2 - p3).Unit
	local u1, u2 = r1:Cross(b).Unit, r2:Cross(b).Unit

	b = u1:Cross(r1).Unit

	local cf1 = CFrame.new(x0.x, x0.y, x0.z, r1.x, u1.x, b.x, r1.y, u1.y, b.y, r1.z, u1.z, b.z)
	local cf2 = CFrame.new(p3.x, p3.y, p3.z, r2.x, u2.x, b.x, r2.y, u2.y, b.y, r2.z, u2.z, b.z)

	return curve0, -curve1, cf1, cf2
end



function findRoute(character)
	local isPlayer = game:GetService("Players"):GetPlayerFromCharacter(character)
	local moveDirection = isPlayer and character.Humanoid.MoveDirection or (character.Humanoid.WalkToPoint - character.HumanoidRootPart.Position).Unit
	local distance = (character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude

local function isDiagonal()
	local absMD = Vector3.new(math.abs(moveDirection.X), 0, math.abs(moveDirection.Z))
	return (absMD - Vector3.new(0.7, 0, 0.7)).Magnitude < 0.5
end


local moveDirection = isPlayer and character.Humanoid.MoveDirection or (character.Humanoid.WalkToPoint - character.HumanoidRootPart.Position).Unit -- ⚠️ Warning: 'moveDirection' is already defined exactly the same.
local distance = (character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude


local function isSideways()
	local direction = (character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Unit
	local highest = math.abs(direction.X) > math.abs(direction.Z) and "Z" or "X"
	return math.abs(moveDirection[highest]) > 0.8
end

local function towardsQB()
	local predictedPosition = character.HumanoidRootPart.Position + (moveDirection * 16)
	local newDistance = (predictedPosition - player.Character.HumanoidRootPart.Position).Magnitude
	local initialDistance = (character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
	local jitter = math.random(-3, 3)
	local velocityFactor = (character.HumanoidRootPart.Velocity.Magnitude / 100) + 1
	local distanceThreshold = 12 + math.random(0, 5)
	local distanceDifference = (initialDistance - newDistance + jitter) * velocityFactor
	return distanceDifference > distanceThreshold
end

local requirements = {
	["go"] = not isDiagonal() and not towardsQB(),
	["post/corner"] = isDiagonal() and not towardsQB() and distance > 125,
	["slant"] = isDiagonal() and not towardsQB() and distance <= 125,
	["in/out"] = isSideways() and distance > 125,
	["flat"] = isSideways() and distance <= 125,
	["curl/comeback"] = towardsQB(),
	["stationary"] = moveDirection.Magnitude == 0
}

local route
for routeName, condition in pairs(requirements) do
	if condition then route = routeName; break end
end


return route, moveDirection
end

local players = game:GetService("Players")
local userInputService = game:GetService("UserInputService")
local player = players.LocalPlayer

local function findTarget()
    local cc = workspace.CurrentCamera
    local playerDist = math.huge
    local playerTarget = nil
    local localTeamID = player:WaitForChild("Replicated"):WaitForChild("TeamID").Value
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and obj:FindFirstChild("HumanoidRootPart") then
            local humanoid = obj:FindFirstChild("Humanoid")
            local characterPlayer = players:GetPlayerFromCharacter(obj)

            if humanoid.Health > 0 and obj ~= player.Character and characterPlayer then
                local replicated = characterPlayer:FindFirstChild("Replicated")
                if replicated and replicated:FindFirstChild("TeamID") then
                    local teamID = replicated.TeamID.Value
                    if teamID == localTeamID then 
                        local hrp = obj:FindFirstChild("HumanoidRootPart")
                        local screenpoint = cc:WorldToViewportPoint(hrp.Position)
                        local check = (Vector2.new(userInputService:GetMouseLocation().X, userInputService:GetMouseLocation().Y) - Vector2.new(screenpoint.X, screenpoint.Y)).Magnitude

                        if check < playerDist then
                            playerTarget = obj
                            playerDist = check
                        end
                    end
                end
            end
        end
    end

    return playerTarget
end

local player = game:GetService("Players").LocalPlayer
local UserInputService = game:GetService("UserInputService")

local clearFolder = workspace:FindFirstChild("ArcParts") or Instance.new("Folder", workspace)

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local randomOffset = function(base, range)
	return base + math.random(-range, range)
end

local player = Players.LocalPlayer
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end

	if SaturnHub["QB Aimbot"].Enabled then
		if input.KeyCode == Enum.KeyCode.Q then
			locked = not locked  
		elseif input.KeyCode == Enum.KeyCode.Z then
			ThrowType = ThrowTypesSwitch[ThrowType]  
		end
	end
end)


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local MiniGamesFolder = ReplicatedStorage:WaitForChild("MiniGames")
local GamesFolder = ReplicatedStorage:WaitForChild("Games")

local function fireEventForFolder(folder)
    if not SaturnHub["QB Aimbot"].Enabled then return end 

    local children = folder:GetChildren()
    for _, child in ipairs(children) do
        if child:FindFirstChild("ReEvent") then
            local nwArgs = {
                [1] = "Mechanics",
                [2] = "ThrowBall",
                [3] = {
                    ["Target"] = player.Character.Head.Position + data.Direction * 10000,
                    ["AutoThrow"] = false,
                    ["Power"] = 
                        (SaturnHub["QB Aimbot"].BeamMode and data.Power * 1.064) or
                        (SaturnHub["QB Aimbot"].AutoAngle and data.Power * 1.065 + 1.75) or
                        (data.Power * 1.05)
                }
            }
            child.ReEvent:FireServer(unpack(nwArgs))
        end
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        fireEventForFolder(MiniGamesFolder)
        fireEventForFolder(GamesFolder)
    end
end)


--[[
local __namecall
__namecall = hookmetamethod(game, "__namecall", function(self, ...)
	local method, args = getnamecallmethod(), { ... }
	if args[1] == "Clicked" and enabled then
		local nwArgs = { "Clicked", player.Character.Head.Position, player.Character.Head.Position + data.Direction * 10000, isPractice and data.Power or 95, data.Power }

		return __namecall(self, unpack(nwArgs))
	end
	return __namecall(self, ...)
end)
]]

local TweenService = game:GetService("TweenService")
local segments = 6000

local function createArc(from, direction, power, airtime, segments)
	if workspace:FindFirstChild("ArcParts") then
		workspace.ArcParts:Destroy()
	end

	local arcFolder = Instance.new("Folder")
	arcFolder.Name = "ArcParts"
	arcFolder.Parent = workspace

	local forwardAdjustment = direction.Unit * 2.5
	local adjustedStartPosition = from + forwardAdjustment

	local attachments = {}

	local timeStep = airtime / segments
	local raiseAmount = 2

	for i = 0, segments do
		local t = i * timeStep
		local position = adjustedStartPosition + direction * (power * t) + Vector3.new(0, -0.5 * 28 * t^2 + raiseAmount, 0)
		local attachment = Instance.new("Attachment")
		attachment.Position = position
		attachment.Parent = workspace.Terrain
		table.insert(attachments, attachment)
	end

	for i = 1, #attachments - 1 do
		local innerBeam = Instance.new("Beam")
		innerBeam.Attachment0 = attachments[i]
		innerBeam.Attachment1 = attachments[i + 1]
		innerBeam.Parent = arcFolder
		innerBeam.FaceCamera = true
		innerBeam.Width0 = 0.5
		innerBeam.Width1 = 0.5
		innerBeam.Transparency = NumberSequence.new(0) 
		innerBeam.LightEmission = 20 
		innerBeam.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0)) 
		innerBeam.Texture = "rbxassetid://121403057" 
		innerBeam.TextureLength = 2
		innerBeam.TextureSpeed = 3 
		innerBeam.LightInfluence = 0 

		local outerBeam = Instance.new("Beam")
		outerBeam.Attachment0 = attachments[i]
		outerBeam.Attachment1 = attachments[i + 1]
		outerBeam.Parent = arcFolder
		outerBeam.FaceCamera = true
		outerBeam.Width0 = 0.9
		outerBeam.Width1 = 0.9
		outerBeam.Transparency = NumberSequence.new(0.8)
		innerBeam.LightEmission = 20 
		outerBeam.Color = ColorSequence.new(Color3.fromRGB(100, 0, 0))
		outerBeam.Texture = "rbxassetid://6034325533"
		outerBeam.TextureLength = 2
		outerBeam.TextureSpeed = 1
		innerBeam.LightInfluence = 0 
	end
	
	local endPart = Instance.new("Part")
	endPart.Anchored = true
	endPart.CanCollide = false
	endPart.Size = Vector3.new(3, 1.5, 3)
	endPart.Position = attachments[#attachments].Position
	endPart.Material = Enum.Material.SmoothPlastic
	endPart.Color = Color3.fromRGB(0, 0, 0)

	local texture = Instance.new("Texture")
	texture.Texture = "rbxassetid://3219207787"
	texture.StudsPerTileU = 1
	texture.StudsPerTileV = 1
	texture.Parent = endPart

	endPart.Parent = arcFolder
end


local function handleBulletMode(distance, route)
	if distance >= 10 and distance < 20 then
		return math.clamp(45 + (20 - distance) * 0.75, 45, 70)
	else
		return (((player.Character.Humanoid.FloorMaterial == Enum.Material.Air and distance * 1.1 or distance) / 8) ^ 1.01)
	end
end

local function handleLobMode(distance)
	return math.min((((player.Character.Humanoid.FloorMaterial == Enum.Material.Air and distance * 1.49 or distance) / 8) ^ 1.4), 70)
end

local function handleBeamMode(distance, throwType)
	if distance <= 0 then
		return 20
	end

	local adjustedDistance = distance / 10
	local height

	if throwType == "Jump" then
		height = 25 + (adjustedDistance ^ 1.25) * 0.225
	elseif throwType == "Mag" then
		height = 20 + (adjustedDistance ^ 1.4) * 0.325
	elseif throwType == "Dime" then
		height = 22 + (adjustedDistance ^ 1.3) * 0.275
	else
		height = 20 + (adjustedDistance ^ 1.2) * 0.225
	end

	if distance > 150 then
		height = height + (distance - 150) * 0.013
	end

	local maxHeight = 60
	if height > maxHeight then
		height = maxHeight
	end

	if height < 20 then
		height = 20
	end

	return height
end


local function handleAngleMode(distance, throwType)
	if distance <= 0 then
		return 20
	end

	local adjustedDistance = distance / 15
	local smoothAdjustment = math.sin(adjustedDistance) * 0.1 + (distance * 0.03)
	smoothAdjustment = math.clamp(smoothAdjustment, 0.05, 0.5)

	local height

	if throwType == "Jump" then
		height = 20 + (adjustedDistance ^ 1.05) + smoothAdjustment * 0.03
	elseif throwType == "Mag" then
		height = 20 + (adjustedDistance ^ 1.05) + smoothAdjustment * 0.01
	elseif throwType == "Dime" then
		height = 20 + (adjustedDistance ^ 1.05) + smoothAdjustment * 0.05
	else
		height = 20 + (adjustedDistance ^ 1.1) + smoothAdjustment * 0.03
	end

	if height < 20 then
		height = 20
	end

	local maxHeight = 50
	if height > maxHeight then
		height = maxHeight
	end

	if distance > 150 then
		height = height + (distance - 150) * 0.003
	end

	return height
end

local fadeValue = 60

local function handleFadeMode()
	return fadeValue
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end

	if input.KeyCode == Enum.KeyCode.F then
		fadeValue = math.clamp(fadeValue - 5, 5, 70)
	elseif input.KeyCode == Enum.KeyCode.R then
		fadeValue = math.clamp(fadeValue + 5, 5, 70)
	end
end)

local function handleNormalMode(distance)
	if distance >= 10 and distance < 20 then
		return math.clamp(45 + (20 - distance) * 0.75, 45, 70)
	end
	return nil
end
highlightParts = {}

local function hasFootball()
    return game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Football") ~= nil
end
task.spawn(function()
	while true do
		task.wait()

		local footballPart = game.Players.LocalPlayer.Character:FindFirstChild("Football")

		local function createHighlight(Character, isLocked)
			for _, part in pairs(highlightParts) do
				part:Destroy()
			end
			highlightParts = {}

			if not hasFootball() or not SaturnHub["QB Aimbot"].Enabled then return end

			local outlineColor = isLocked and Color3.fromRGB(0, 0, 0) or Color3.fromRGB(100, 0, 0)
			local insideColor = isLocked and Color3.fromRGB(100, 0, 0) or Color3.fromRGB(0, 0, 0)

			for _, part in pairs(Character:GetChildren()) do
				if part:IsA("MeshPart") or part:IsA("Part") then
					local highlight = Instance.new("SelectionBox")
					highlight.Parent = part
					highlight.Adornee = part
					highlight.Color3 = outlineColor
					highlight.LineThickness = 0.1
					highlight.SurfaceTransparency = 0.5
					highlight.SurfaceColor3 = insideColor
					table.insert(highlightParts, highlight)
				end
			end
		end

		if footballPart then
			local success, err = pcall(function()
				target = locked and target or findTarget()
				if target and SaturnHub["QB Aimbot"].Enabled then
					local route, md = findRoute(target)
					local distance = (player.Character.HumanoidRootPart.Position - target.HumanoidRootPart.Position).Magnitude

					local function handleBulletAngle(distance, route)
						return handleBulletMode(distance, route)
					end

					local function handleLobAngle(distance)
						return handleLobMode(distance)
					end

					local function handleBeamAngle(distance)
						return handleBeamMode(distance)
					end

					local function handleAngleModeCalculation(distance)
						return handleAngleMode(distance)
					end

					local function handleFadeAngle()
						return handleFadeMode()
					end

					local function handleNormalAngle(distance)
						return handleNormalMode(distance)
					end

					local function updateAngleBasedOnThrowType(distance, route)
						if ThrowType == "Bullet" then
							return handleBulletAngle(distance, route)
						elseif SaturnHub["QB Aimbot"].LobMode then
							return handleLobAngle(distance)
						elseif SaturnHub["QB Aimbot"].BeamMode then
							return handleBeamAngle(distance)
						elseif SaturnHub["QB Aimbot"].AutoAngle then
							return handleAngleModeCalculation(distance)
						elseif SaturnHub["QB Aimbot"].FadeMode then
							return handleFadeAngle()
						else
							return handleFadeAngle(distance)
						end
					end

					data.Angle = updateAngleBasedOnThrowType(distance, route)

					local xLeadAdjustments = {
						Bullet = -7.75,
						Lob = 3,
						Beam = 0,
						Angle = 2,
						Fade = -2,
						Normal = 1
					}

					local function calculateXLead(distance, route)
						local xLeadValue = 0

						local routeType = (SaturnHub["QB Aimbot"].LobMode or SaturnHub["QB Aimbot"].BeamMode or ThrowType == "Bullet" or SaturnHub["QB Aimbot"].FadeMode) 
											and table.find(sidewayRoutes, route) 
											and "Dot" 
										  or (ThrowType == "Bullet" and "Mag") 
										  or ThrowType

						local offset = offsets[routeType].xLead(distance, route)
						local routeOffset = offsets[routeType].routes[route].xzOffset

						xLeadValue = offset + routeOffset

						local adjustment = xLeadAdjustments[ThrowType] or 0
						xLeadValue = xLeadValue + adjustment

						if SaturnHub["QB Aimbot"].LobMode and not table.find(sidewayRoutes, route) then
							xLeadValue = xLeadValue + (10 - (distance / 100))
						end

						return xLeadValue
					end

					local xLead = calculateXLead(distance, route)

					local vel, airtime = CharacterVelocity(
						player.Character.Head.Position,
						target,
						data.Angle,
						xLead,
						0,
						(SaturnHub["QB Aimbot"].BeamMode and (
							(ThrowType == "Jump" and Vector3.new(0, -1, 0)) or
							(ThrowType == "Mag" and Vector3.new(0, 3, 0)) or   
							(ThrowType == "Dime" and Vector3.new(0, 3, 0))    
						)) or (
							(ThrowType == "Jump" and Vector3.new(0, 0, 0)) or  
							(ThrowType == "Mag" and Vector3.new(0, 3, 0)) or    
							(ThrowType == "Dime" and Vector3.new(0, 0, 0)) or 
							Vector3.new(0, SaturnHub["QB Aimbot"].AntiOOBThreshold, 0)
						),
						route
					)

					local power = math.min(math.round(vel.Magnitude), 95)

					if ThrowType == "Bullet" then
						power = math.clamp(power, 70, 95)
					end

					local direction = vel.Unit

					local endPart, beam = createArc(player.Character.Head.Position, direction, power, airtime, 20)

					data.Power = power
					data.Direction = direction
					Val_16.Text = (math.round(airtime * 100) / 100) .. "s"
					Val_12.Text = math.round(data.Angle * 10) / 10
					Val_8.Text = ThrowType
					Val.Text = power
					Val_2.Text = target.Name

					createHighlight(target, locked) 
				end

				if SaturnHub["QB Aimbot"].Enabled then
					Cards.Enabled = true
				else
					Cards.Enabled = false
				end
			end)

			if not success and SaturnHub["QB Aimbot"].DebugMode then
				warn(err)
			end
		else
			Cards.Enabled = false
		end
	end
end)

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
local Humanoid = Character and Character:FindFirstChild("Humanoid")

local SaturnHub = {
    ["Pull Vector"] = {
        Enabled = false,
        Distance = 0,
        Type = "Teleport",
    },
    ["Walk Speed"] = {
        Enabled = false,
        Speed = 23,
    },
    ["Jump Power"] = {
        Enabled = false,
        Power = 50,
    },
    ["Hip Height"] = {
        Enabled = false,
        Height = 1.35,
    },
    ["Replication Lag"] = {
        Enabled = false,
        Lag = 0,
    },
    ["CFrame WalkSpeed"] = {
        Enabled = false,
        Speed = 0,
    },
    ["Desync"] = {
        Enabled = false,
        Offset = Vector3.new(0, 25, 0),
        Interval = 0.1,
    },
    ["Long Arms"] = {
        Enabled = false,
        Size = 2,
    },
    ["Quick TP"] = {
        Enabled = false,
        TP = 0,
    },
    ["Angle Enhancer"] = {
        Enabled = true,
        JP = 70,
        SCheck = true,
    },
    ["Stamina Control"] = {
        Infinite_Stamina = false,
    },
    ["Auto Rush"] = {
        Enabled = false,
        RushSpeed = 20,
    },
    ["Tackle Reach"] = {
        Enabled = false,
        Size = Vector3.new(6, 6, 6),
        ShowHitbox = false,
        HitboxTransparency = 0,
    },
    ["Gravity"] = {
        Enabled = false,
        Gravity = 196.2
    },
}

SaturnHelper.updateCharacter()
LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.5)
    SaturnHelper.updateCharacter()
end)

--[[task.spawn(function()
    while task.wait() do
        local Football = SaturnHelper.findFootball()

        if not SaturnHub["Pull Vector"].Enabled then
            continue
        end

        if not Football then
            continue
        end

        if not Character or not HumanoidRootPart or not Humanoid then
            continue
        end

        local Distance = (Football.Position - HumanoidRootPart.Position).Magnitude
        local Direction = (Football.Position - HumanoidRootPart.Position).Unit

        if Distance <= SaturnHub["Pull Vector"].Distance then
            if SaturnHub["Pull Vector"].Type == "Teleport" then
                HumanoidRootPart.CFrame = Football.CFrame + CFrame.new(0, -2, 0)
            else
                HumanoidRootPart.Velocity = Direction
            end
        end
    end
end)--]]

local tab1 = window:Tab({ TabTitle = "Catching" })
local tab2 = window:Tab({ TabTitle = "Physics" })
local tab3 = window:Tab({ TabTitle = "Throwing" })
local tab6 = window:Tab({ TabTitle = "Trolling" })
local tab7 = window:Tab({ TabTitle = "Player" })
local tab8 = window:Tab({ TabTitle = "Settings" })

do
    -- Catching Tab
    tab1:Toggle({
        Title = "Pull Vector",
        Default = SaturnHub["Pull Vector"].Enabled,
        Callback = function(val) SaturnHub["Pull Vector"].Enabled = val end
    })
    tab1:Slider({
        Title = "Pull Distance",
        Min = 0, Max = 25, Default = SaturnHub["Pull Vector"].Distance,
        Callback = function(val) SaturnHub["Pull Vector"].Distance = val end
    })
    tab1:Dropdown({
        Title = "Pull Type",
        Options = { "Teleport", "Velocity" },
        Default = SaturnHub["Pull Vector"].Type,
        Callback = function(val) SaturnHub["Pull Vector"].Type = val end
    })
    tab1:Toggle({
        Title = "Long Arms",
        Default = SaturnHub["Long Arms"].Enabled,
        Callback = function(val) SaturnHub["Long Arms"].Enabled = val end
    })
    tab1:Slider({
        Title = "Arm Size",
        Min = 2, Max = 10, Default = SaturnHub["Long Arms"].Size,
        Callback = function(val) SaturnHub["Long Arms"].Size = val end
    })
	local headSize = 6
local headTransparency = 0
local teamCheck = false
local enabled = false

tab1:Slider({
    Title = "Head size",
    Min = 1, Max = 30, Default = 6,
    Callback = function(v)
        headSize = v
    end
})

tab1:Slider({
    Title = "Hitbox transparency",
    Min = 0, Max = 1, Default = 0,
    Callback = function(v)
        headTransparency = v
    end
})

tab1:Toggle({
    Title = "Team Check",
    Default = false,
    Callback = function(v)
        teamCheck = v
    end
})

tab1:Toggle({
    Title = "Big Head",
    Default = false,
    Callback = function(v)
        enabled = v
        if enabled then
            for _, plr in pairs(game.Players:GetPlayers()) do
                if plr ~= game.Players.LocalPlayer then
                    if teamCheck and plr.Team == game.Players.LocalPlayer.Team then continue end
                    local chr = plr.Character
                    if chr and chr:FindFirstChild("Head") then
                        local h = chr.Head
                        h.Size = Vector3.new(headSize, headSize, headSize)
                        h.Transparency = headTransparency
                        if h:FindFirstChild("Mesh") then h.Mesh:Destroy() end
                    end
                end
            end
        else
            for _, plr in pairs(game.Players:GetPlayers()) do
                if plr ~= game.Players.LocalPlayer then
                    local chr = plr.Character
                    if chr and chr:FindFirstChild("Head") then
                        local h = chr.Head
                        h.Size = Vector3.new(2, 1, 1)
                        h.Transparency = 0
                    end
                end
            end
        end
    end
})

end

do
    tab2:Toggle({
        Title = "Walk Speed",
        Default = SaturnHub["Walk Speed"].Enabled,
        Callback = function(val) SaturnHub["Walk Speed"].Enabled = val end
    })
    tab2:Slider({
        Title = "Speed",
        Min = 23, Max = 100, Default = SaturnHub["Walk Speed"].Speed,
        Callback = function(val) SaturnHub["Walk Speed"].Speed = val end
    })
    
    tab7:Toggle({
        Title = "Jump Power",
        Default = SaturnHub["Jump Power"].Enabled,
        Callback = function(val) SaturnHub["Jump Power"].Enabled = val end
    })
    tab7:Slider({
        Title = "Power",
        Min = 50, Max = 70, Default = SaturnHub["Jump Power"].Power,
        Callback = function(val) SaturnHub["Jump Power"].Power = val end
    })

    tab2:Toggle({
        Title = "Hip Height",
        Default = SaturnHub["Hip Height"].Enabled,
        Callback = function(val) SaturnHub["Hip Height"].Enabled = val end
    })
    tab2:Slider({
        Title = "Height",
        Min = 1.35, Max = 5, Default = SaturnHub["Hip Height"].Height,
        Callback = function(val) SaturnHub["Hip Height"].Height = val end
    })

    tab2:Toggle({
        Title = "Replication Lag",
        Default = SaturnHub["Replication Lag"].Enabled,
        Callback = function(val) SaturnHub["Replication Lag"].Enabled = val end
    })
    tab2:Slider({
        Title = "Lag (ms)",
        Min = 0, Max = 500, Default = SaturnHub["Replication Lag"].Lag,
        Callback = function(val) SaturnHub["Replication Lag"].Lag = val end
    })

    tab2:Toggle({
        Title = "CFrame WalkSpeed",
        Default = SaturnHub["CFrame WalkSpeed"].Enabled,
        Callback = function(val) SaturnHub["CFrame WalkSpeed"].Enabled = val end
    })
    tab2:Slider({
        Title = "Speed",
        Min = 0, Max = 10, Default = SaturnHub["CFrame WalkSpeed"].Speed,
        Callback = function(val) SaturnHub["CFrame WalkSpeed"].Speed = val end
    })

    tab2:Toggle({
        Title = "Desync",
        Default = SaturnHub["Desync"].Enabled,
        Callback = function(val) SaturnHub["Desync"].Enabled = val end
    })
    tab2:Slider({
        Title = "Offset Y",
        Min = 0, Max = 50, Default = SaturnHub["Desync"].Offset.Y,
        Callback = function(val)
            SaturnHub["Desync"].Offset = Vector3.new(0, val, 0)
        end
    })
    tab2:Slider({
        Title = "Interval",
        Min = 0.01, Max = 1, Default = SaturnHub["Desync"].Interval,
        Callback = function(val) SaturnHub["Desync"].Interval = val end
    })

    tab2:Toggle({
        Title = "Quick TP",
        Default = SaturnHub["Quick TP"].Enabled,
        Callback = function(val) SaturnHub["Quick TP"].Enabled = val end
    })
    tab2:Slider({
        Title = "Teleport Distance",
        Min = 0, Max = 50, Default = SaturnHub["Quick TP"].TP,
        Callback = function(val) SaturnHub["Quick TP"].TP = val end
    })

    tab2:Toggle({
        Title = "Gravity Control",
        Default = SaturnHub["Gravity"].Enabled,
        Callback = function(val) SaturnHub["Gravity"].Enabled = val end
    })
    tab2:Slider({
        Title = "Gravity",
        Min = 196.2, Max = 500, Default = SaturnHub["Gravity"].Gravity,
        Callback = function(val) SaturnHub["Gravity"].Gravity = val end
    })
end

do
    -- Throwing Tab
    tab3:Toggle({
        Title = "Enable Aimbot",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].Enabled = val end
    })
    tab3:Toggle({
        Title = "Lob Mode",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].LobMode = val end
    })
    tab3:Toggle({
        Title = "Beam Mode",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].BeamMode = val end
    })
    tab3:Toggle({
        Title = "Auto Angle",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].AutoAngle = val end
    })
    tab3:Toggle({
        Title = "Fade Mode",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].FadeMode = val end
    })
    tab3:Toggle({
        Title = "Anti OOB",
        Default = false,
        Callback = function(val) SaturnHub["QB Aimbot"].AntiOOB = val end
    })
    tab3:Slider({
        Title = "Adjust Throw Height",
        Min = 0, Max = 10, Default = 0,
        Callback = function(val) SaturnHub["QB Aimbot"].AntiOOBThreshold = val end
    })
    tab3:Slider({
        Title = "Adjust Lead Distance",
        Min = 0, Max = 10, Default = 0,
        Callback = function(val) SaturnHub["QB Aimbot"].LeadDistance = val end
    })
end

do
    -- Player Tab
    tab7:Toggle({
        Title = "Angle Enhancer",
        Default = SaturnHub["Angle Enhancer"].Enabled,
        Callback = function(val) SaturnHub["Angle Enhancer"].Enabled = val end
    })
    tab7:Slider({
        Title = "Jump Power",
        Min = 50, Max = 70, Default = SaturnHub["Angle Enhancer"].JP,
        Callback = function(val) SaturnHub["Angle Enhancer"].JP = val end
    })
    tab7:Toggle({
        Title = "S Key Check",
        Default = SaturnHub["Angle Enhancer"].SCheck,
        Callback = function(val) SaturnHub["Angle Enhancer"].SCheck = val end
    })

    tab7:Toggle({
        Title = "Infinite Stamina",
        Default = SaturnHub["Stamina Control"].Infinite_Stamina,
        Callback = function(val) SaturnHub["Stamina Control"].Infinite_Stamina = val end
    })
end

do
    -- Automatics Tab
    tab2:Toggle({
        Title = "Auto Rush",
        Default = SaturnHub["Auto Rush"].Enabled,
        Callback = function(val) SaturnHub["Auto Rush"].Enabled = val end
    })
    tab2:Slider({
        Title = "Rush Speed",
        Min = 10, Max = 100, Default = SaturnHub["Auto Rush"].RushSpeed,
        Callback = function(val) SaturnHub["Auto Rush"].RushSpeed = val end
    })
end

do
    -- Trolling Tab
    tab6:Toggle({
        Title = "Tackle Reach",
        Default = SaturnHub["Tackle Reach"].Enabled,
        Callback = function(val) SaturnHub["Tackle Reach"].Enabled = val end
    })
    tab6:Slider({
        Title = "Hitbox Size (X/Y/Z)",
        Min = 1, Max = 10, Default = SaturnHub["Tackle Reach"].Size.X,
        Callback = function(val)
            SaturnHub["Tackle Reach"].Size = Vector3.new(val, val, val)
        end
    })
    tab6:Toggle({
        Title = "Show Hitbox",
        Default = SaturnHub["Tackle Reach"].ShowHitbox,
        Callback = function(val) SaturnHub["Tackle Reach"].ShowHitbox = val end
    })
    tab6:Slider({
        Title = "Hitbox Transparency",
        Min = 0, Max = 1, Default = SaturnHub["Tackle Reach"].HitboxTransparency,
        Callback = function(val) SaturnHub["Tackle Reach"].HitboxTransparency = val end
    })
end

tab8:TextBox({
    Title = "Config Name",
    Default = "default",
    Placeholder = "Enter config name...",
    MaxLength = 50,
    Callback = function(text)
        CurrentConfigName = (typeof(text) == "string" and text ~= "") and text or "default"
    end
})

ConfigDropdownRef = tab8:Dropdown({
    Title = "Select Config",
    Options = listConfigs(),
    Default = 1,
    Callback = function(opt)
        if opt ~= "No saved configs" then
            CurrentConfigName = opt
        end
    end
})

tab8:Button({
    Title = "Save Config",
    Callback = function()
        SaveConfig()
        RefreshConfigs()
    end
})

tab8:Button({
    Title = "Load Config",
    Callback = function()
        if not CurrentConfigName or CurrentConfigName == "No saved configs" then
            warn("[Config Manager] Please select a valid config to load!")
            return
        end

        local ok, err = pcall(function() 
            LoadConfig() 
        end)

        if not ok then
            warn("[Config Manager] Error loading config: " .. tostring(err))
        end
    end
})

tab8:Button({
    Title = "Delete Config",
    Callback = function()
        DeleteConfig()
        RefreshConfigs()
    end
})

tab8:Button({
    Title = "Refresh Configs",
    Callback = function()
        RefreshConfigs()
    end
})

createParagraphElement(
    tabContainers["Settings"].right,
    "Configs 101",
    [[<b>How to Use Configs:</b><br/>
    1. Enter a name in 'Config Name'.<br/>
    2. Press 'Save Config' to create your config.<br/>
    3. Use 'Select Config' to pick a saved config.<br/>
    4. Press 'Load Config' to apply it.<br/>
    5. Press 'Delete Config' to remove it permanently.<br/><br/>
    <b>Sharing Configs:</b><br/>
    1. Find the 'SaturnV7' folder in your executor workspace.<br/>
    2. Copy your config and send it.<br/>
    3. Others can drop it into their folder and select it.
    ]]
)

do
    local conn; conn = RunService.PreSimulation:Connect(function()
        local Football = SaturnHelper.findFootball()

        if not SaturnHub["Pull Vector"].Enabled then
            return
        end

        if not Football then
            return
        end

        if not Character or not HumanoidRootPart or not Humanoid then
            return
        end

        local Distance = (Football.Position - HumanoidRootPart.Position).Magnitude
        local Direction = (Football.Position - HumanoidRootPart.Position).Unit

        if Distance <= SaturnHub["Pull Vector"].Distance then
            if SaturnHub["Pull Vector"].Type == "Teleport" then
                HumanoidRootPart.CFrame = Football.CFrame + CFrame.new(0, -2, 0)
            else
                HumanoidRootPart.Velocity = Direction
            end
        end
    end)
end

do
    RunService.PreSimulation:Connect(function()
        if SaturnHub["Walk Speed"].Enabled then
            Humanoid.WalkSpeed = SaturnHub["Walk Speed"].Speed
        end

        if SaturnHub["Hip Height"].Enabled then
            Humanoid.HipHeight = SaturnHub["Hip Height"].Height
        end
    end)

    RunService.PreSimulation:Connect(function()
        if not SaturnHub["Replication Lag"].Enabled then 
            settings():GetService("NetworkSettings").IncomingReplicationLag = 0 
            return 
        end
		settings():GetService("NetworkSettings").IncomingReplicationLag = SaturnHub["Replication Lag"].Lag / 100
    end)

    Humanoid.Jumping:Connect(function()
        if Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
            task.wait(0.05)

            if SaturnHub["Jump Power"].Enabled then
                HumanoidRootPart.Velocity += Vector3.new(0, SaturnHub["Jump Power"].Power - 50, 0)
            end
        end
    end)

    RunService.PreSimulation:Connect(function(Input)
        local Direction = Humanoid.MoveDirection

        if not SaturnHub["CFrame WalkSpeed"].Enabled then
            return
        end

        if Direction.Magnitude > 0 then
            HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + Direction.Unit * (SaturnHub["CFrame WalkSpeed"] * Input)
        end
    end)

    RunService.PreSimulation:Connect(function()
        if not HumanoidRootPart or not HumanoidRootPart.Parent then
            return
        end

        if not SaturnHub["Desync"].Enabled then
            return
        end

		local realPos = HumanoidRootPart.CFrame
		HumanoidRootPart.CFrame = realPos + SaturnHub["Desync"].Offset
		RunService.RenderStepped:Wait()
		HumanoidRootPart.CFrame = realPos
    end)

    RunService.PreSimulation:Connect(function()
        local Left_Arm = Character:WaitForChild("Left Arm")
        local Right_Arm = Character:WaitForChild("Right Arm")

        if Right_Arm then
            Right_Arm.Size = Vector3.new(Right_Arm.Size.X, SaturnHub["Long Arms"].Enabled and SaturnHub["Long Arms"].Size or 2, Right_Arm.Size.Z)
        end

        if Left_Arm then
            Left_Arm.Size = Vector3.new(Left_Arm.Size.X, SaturnHub["Long Arms"].Enabled and SaturnHub["Long Arms"].Size or 2, Left_Arm.Size.Z)
        end
    end)

    UIS.InputBegan:Connect(function(Input)
        if Input.KeyCode == Enum.KeyCode.F then
            if SaturnHub["Quick TP"].Enabled then
                HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + HumanoidRootPart.CFrame.LookVector * SaturnHub["Quick TP"].TP
            end
        end
    end)
end

do
    local ShiftEnabled = false
    local HoldingS = false
    local Tick = tick()

    local Last_Enabled = false
    local Old_Look_Vector = Vector3.new(0, 0, 0)

    Humanoid.Jumping:Connect(function()
        if Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
            if os.clock() - Tick > 0.2 then 
                return 
            end

            if SaturnHub["Angle Enhancer"].Enabled then
                if SaturnHub["Angle Enhancer"].SCheck and not HoldingS then
                    return
                end

                task.wait(0.05)
                HumanoidRootPart.Velocity += Vector3.new(0, SaturnHub["Angle Enhancer"].JP - 50, 0)
            end
        end
    end)
    
    UIS.InputBegan:Connect(function(Input, HoldingKey)
        if not HoldingKey then
            if Input.KeyCode == Enum.KeyCode.S then
                HoldingS = true
            end
        end
    end)

    UIS.InputEnded:Connect(function(Input)
        if Input.KeyCode == Enum.KeyCode.S then
            HoldingS = false
        end
    end)

    game:GetService("UserInputService"):GetPropertyChangedSignal("MouseBehavior"):Connect(function()
        if game:GetService("UserInputService").MouseBehavior == Enum.MouseBehavior.LockCenter then
            ShiftEnabled = true
        else
            ShiftEnabled = false
        end
    end)

    RunService.PreSimulation:Connect(function()
        local Look_Vector = HumanoidRootPart.CFrame.LookVector
        local Difference = (Old_Look_Vector - Look_Vector).Magnitude

        if not ShiftEnabled and Last_Enabled then
            Tick = os.clock()
        end

        Old_Look_Vector = Look_Vector
        Last_Enabled = ShiftEnabled
    end)
end

do
    local MechanicsModule = require(ReplicatedStorage.Assets.Modules.Client.Mechanics)

    local originalMechanics = MechanicsModule
    local proxyMechanics = {}

    setmetatable(proxyMechanics, {
        __index = function(_, key)
            return originalMechanics[key]
        end,
        __newindex = function(_, key, value)
            if key == "Stamina" then
                if SaturnHub["Stamina Control"].Infinite_Stamina and value < 100 then
                    originalMechanics[key] = 100
                else
                    originalMechanics[key] = value
                end
            else
                originalMechanics[key] = value
            end
        end
    })

    originalMechanics.Stamina = proxyMechanics.Stamina

    task.spawn(function()
        while task.wait(0.1) do
            if SaturnHub["Stamina Control"].Infinite_Stamina and proxyMechanics.Stamina < 100 then
                proxyMechanics.Stamina = 100
            end
        end
    end)

    local MoveToPosition = function(Target)
        local Direction = (Target - HumanoidRootPart.Position).Unit
        local MoveTo = HumanoidRootPart.Position + Direction * 100

        Humanoid:MoveTo(MoveTo)
    end

    RunService.PreSimulation:Connect(function()
        if not SaturnHub["Auto Rush"].Enabled then
            return
        end

        local _, PredictedPosition = SaturnHelper.FindNearestPlayerWithFootball()

        if PredictedPosition then
            MoveToPosition(PredictedPosition)

            if Humanoid then
                Humanoid.JumpPower = SaturnHub["Auto Rush"].RushSpeed
            end
        end
    end)
end

do
    local Default = Vector3.new(5.197499752044678, 6.299999713897705, 2.309999942779541)

    game:GetService("RunService").Heartbeat:Connect(function()
        local catchBoxes = SaturnHelper.FindCatchBoxes()

        for _, catchBox in next, catchBoxes do
            if SaturnHub["Tackle Reach"].Enabled then
                if catchBox.Size ~= SaturnHub["Tackle Reach"].Size then
                    catchBox.Size = SaturnHub["Tackle Reach"].Size
                end
            else
                if catchBox.Size ~= Default then
                    catchBox.Size = Default
                end
            end

            catchBox.CanCollide = false

            if SaturnHub["Tackle Reach"].ShowHitbox then
                catchBox.Transparency = SaturnHub["Tackle Reach"].HitboxTransparency
                catchBox.Material = Enum.Material.SmoothPlastic
            else
                catchBox.Transparency = 1
            end
        end
    end)

    RunService.PreSimulation:Connect(function()
        if not HumanoidRootPart then
            return
        end

        if not SaturnHub["Gravity"].Enabled then
            return
        end

        workspace.Gravity = SaturnHub["Gravity"].Gravity
    end)
end
